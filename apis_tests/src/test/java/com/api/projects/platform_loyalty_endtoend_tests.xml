<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="cb40d130-0486-4f5f-8093-9bd80b5e44b6" activeEnvironment="Default" name="platform_loyalty_endtoend_tests" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" defaultScriptLanguage="Groovy" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="f83c5208-a573-4edc-b9ee-e1dbc68b757a" wadlVersion="http://wadl.dev.java.net/2009/02" name="customer_add" type="rest" definitionUrl="http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:endpoint>https://nightly.capillary.in</con:endpoint></con:endpoints><con:resource name="add" path="/{version}/customer/add" id="962fdae1-7460-4dac-92cd-004cf38d476e"><con:settings/><con:parameters><con:parameter><con:name>version</con:name><con:value>version</con:value><con:style>TEMPLATE</con:style><con:default>version</con:default></con:parameter><con:parameter><con:name>format</con:name><con:value>{format}</con:value><con:style>QUERY</con:style><con:default>{format}</con:default></con:parameter></con:parameters><con:method name="Method 1" id="4b908cfb-b824-41e5-bec9-c1a7718b59d8" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "6706295457",
        "email": "6706295457@gmail.com",

        "firstname": "ng_test",
        "lastname": "g_test",
        "gender": "F",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "122001"
					}
				]
			},
        "custom_fields": {
          "field": [
            {
              "name": "Hobbies",
              "value": "[“Fitness”]"
            },
            {
              "name": "a",
              "value": "[“b”]"
            }
          ]
        }

      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="e04fff62-3e0e-4387-8dfd-0b7ac5b37a3c" wadlVersion="http://wadl.dev.java.net/2009/02" name="getEventLogs" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://nightly.capillary.in</con:endpoint><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="{req_id}" path="/{version}/webHooks/eventLog/requestId/{request_id}" id="f75ff369-9710-4e54-b790-297750bfb3bd"><con:settings/><con:parameters><con:parameter><con:name>version</con:name><con:value>v3</con:value><con:style>TEMPLATE</con:style><con:default>v3</con:default></con:parameter><con:parameter><con:name>request_id</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="Method 1" id="f9db9900-9406-472a-8d8c-0eaf603590c1" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json;charset=ISO-8859-1</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:d0b="https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa">d0b:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:d0b="https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa">d0b:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:d0b="https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa">d0b:Fault</con:element></con:representation><con:request name="Request 1" id="c3c5f177-ed07-4079-aa2d-e3b654c037ab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic Y20uMToyMDJjYjk2MmFjNTkwNzViOTY0YjA3MTUyZDIzNGI3MA==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa</con:originalUri><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="version" value="v3"/>
  <con:entry key="request_id" value=""/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>request_id</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="356e75ca-0be2-4ebd-b5dd-fd47a09c8647" wadlVersion="http://wadl.dev.java.net/2009/02" name="webhook" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://${#Project#webhook_workspace}</con:endpoint><con:endpoint>http://enqovte5kgmv6a1.m.pipedream.net/</con:endpoint></con:endpoints><con:resource name="events" path="/api/events" id="016d33c5-439b-45fa-a767-71ab5a57370b"><con:settings/><con:parameters><con:parameter><con:name>request_id</con:name><con:value>9f54fb7a-aa1d-430d-a1b3-d5dca350fd29</con:value><con:style>QUERY</con:style><con:default>9f54fb7a-aa1d-430d-a1b3-d5dca350fd29</con:default></con:parameter></con:parameters><con:method name="Method 1" id="74e87b38-4211-4367-8ebf-50a19028d74b" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="34ead1d1-1594-4ef4-9ce9-40c691346b9e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Accept" value="text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"/>
  &lt;con:entry key="User-Agent" value="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#webhook_workspace}</con:endpoint><con:request/><con:originalUri>https://enlvdydwm08ks.x.pipedream.net/api/events</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="3212de9c-e2cb-49ed-9b76-075cbc718ca7" wadlVersion="http://wadl.dev.java.net/2009/02" name="getWebhooks" type="rest" definitionUrl="http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="webHooks" path="/{version}/webHooks" id="0e2aa914-1d7d-478d-a249-2ce7557bf37d"><con:settings/><con:parameters><con:parameter><con:name>version</con:name><con:value>version</con:value><con:style>TEMPLATE</con:style><con:default>version</con:default></con:parameter></con:parameters><con:method name="Method 1" id="c466a5b3-508f-4df5-9b1a-100b5435fc49" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="e34c812d-806e-498b-adbd-323081eda9a6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="3d786918-f43a-4f2b-bc6e-f1345cc7752c" wadlVersion="http://wadl.dev.java.net/2009/02" name="getCustomerV2" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="{user_id}" path="/v2/customers/{user_id}" id="2e7ea798-f565-4a0e-956f-4f6b84ee913a"><con:settings/><con:parameters><con:parameter><con:name>user_id</con:name><con:value>user_id</con:value><con:style>TEMPLATE</con:style><con:default>user_id</con:default></con:parameter><con:parameter><con:name>source</con:name><con:value>ALL</con:value><con:style>QUERY</con:style><con:default>ALL</con:default></con:parameter><con:parameter><con:name>accountId</con:name><con:value/><con:style>QUERY</con:style><con:default/></con:parameter><con:parameter><con:name>embed</con:name><con:value>mlp</con:value><con:style>QUERY</con:style><con:default>mlp</con:default></con:parameter></con:parameters><con:method name="Method 1" id="8d8691dc-6a53-48c4-8c2c-bcaf4d7bf7ee" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="35a353eb-1756-4e37-83f8-d8c4a290f0aa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v2/customers/376790377</con:originalUri><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="user_id" value="376790377" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="0568445a-36d0-42b5-9933-89df50b53456" wadlVersion="http://wadl.dev.java.net/2009/02" name="addRegularTransaction" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="add" path="/v1.1/transaction/add" id="dee9310e-99b0-48cf-acb7-ec04400c84c4"><con:settings/><con:parameters><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter></con:parameters><con:method name="Method 1" id="7d818094-4183-4839-b179-0eab76edf758" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="30d7b033-bada-4cf6-abdf-781b858869dc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
	"root": {
		"transaction": {
			"bill_client_id": "1121888",
			"type": "regular",
			"number": "BILL_6935391507",
			"notes": "2 lin1e items",
			"amount" : 50000,
			"gross_amount": "100",
			"discount": "10",
			"customer": {
				"mobile": "6935391507",
				"email": "6935391507@gmail.com",
				"external_id": "x6935391507",
				"firstname": "Nayan",
				"lastname": "Gaur"
			},
			"extended_fields": {
				"field": [{
						"name": "ship_first_name",
						"value": "Nayan"
					},
					{
						"name": "ship_last_name",
						"value": "Gaur"
					}
				]
			},
			"payment_details": {
				"payment": [{
						"mode": "CASH",
						"value": "100"
					},
					{
						"mode": [
							"CREDIT",
							"CHECKAPI"
						],
						"value": [
							"4000",
							"500"
						],
						"attributes": {
							"attribute": [{
									"name": "BankNameAPI",
									"value": "value_602656"
								},
								{
									"name": "branch_nameAPI",
									"value": "value_602656"
								}
							]
						},
						"notes": "notes_602656"
					}
				]
			},
			"custom_fields": {

				"field": [{
						"name": "bankdetails",
						"value": "SBI"
					},
					{
						"name": "bankdetails",
						"value": "SBI"
					}
				]

			},
			"line_items": {
				"line_item": [{
						"extended_fields": {
							"field": [{
									"name": "MetalRate",
									"value": 23
								},
								{
									"name": "service_tax_amount",
									"value": 100
								}
							]
						},
						"serial": "1",
						"amount": "500",
						"description": "soap",
						"item_code": "item-001",
						"qty": "50",
						"rate": "10",
						"value": "500",
						"attributes": {
							"attribute": {
								"name": "brand",
								"value": "Levis"
							}
						}
					},
					{
						"extended_fields": {
							"field": [{
									"name": "DesignCode",
									"value": "jmh6677"
								},
								{
									"name": "SupplierCode",
									"value": "hgjy111"
								}
							]
						},
						"serial": "2",
						"amount": "500",
						"description": "soap",
						"item_code": "item-001",
						"qty": "50",
						"rate": "10",
						"value": "500",
						"transaction_number": "niBill1",
						"attributes": {
							"attribute": {
								"name": "brand",
								"value": "Levis"
							}
						}
					},
					{
						"extended_fields": {
							"field": [{
									"name": "StoneCharge",
									"value": 22
								},
								{
									"name": "MakingCharge",
									"value": 11
								}
							]
						},
						"serial": "3",
						"item_code": "t122",
						"description": "afvdfvd",
						"qty": "3",
						"rate": "1000",
						"value": "3000",
						"discount_value": "100",
						"amount": "2900",
						"cashier_id": "cash1233",
						"type": "return",
						"return_type": "LINE_ITEM",
						"transaction_number": "previousBill1"
					}
				]
			},
			"associate_details": {
				"code": "hiraxdhara",
				"name": "Tom Sawyer"
			}
		}
	}
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/transaction/add</con:originalUri><con:credentials><con:username>cm.1</con:username><con:password>202cb962ac59075b964b07152d234b70</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="9188fa72-d4ca-4799-b0ec-81d98303a349" wadlVersion="http://wadl.dev.java.net/2009/02" name="isRedeemable" type="rest" definitionUrl="http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="isredeemable" path="/{version}/points/isredeemable" id="fd2cf47e-cfde-48da-8593-244b9da11944"><con:settings/><con:parameters><con:parameter><con:name>version</con:name><con:value>version</con:value><con:style>TEMPLATE</con:style><con:default>version</con:default></con:parameter><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter><con:parameter><con:name>points</con:name><con:value>{points}</con:value><con:style>QUERY</con:style><con:default>{points}</con:default></con:parameter><con:parameter><con:name>skip_validation</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default></con:parameter><con:parameter><con:name>mobile</con:name><con:value>{mobile}</con:value><con:style>QUERY</con:style><con:default>{mobile}</con:default></con:parameter><con:parameter><con:name>program_id</con:name><con:style>QUERY</con:style></con:parameter></con:parameters><con:method name="Method 1" id="d951de00-4eb0-48cb-b9c6-a53e5d8c10d2" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="7324ca5d-555c-46eb-892f-02a744545f27" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/version/points/isredeemable</con:originalUri><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="mobile" value="7456470100"/>
  <con:entry key="version" value="v1.1"/>
  <con:entry key="points" value="50"/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>format</con:entry><con:entry>points</con:entry><con:entry>skip_validation</con:entry><con:entry>mobile</con:entry><con:entry>program_id</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="01393347-1433-435e-8d4d-c02b4f1ad97c" wadlVersion="http://wadl.dev.java.net/2009/02" name="RedeemPoints" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="redeem" path="/{version}/points/redeem" id="8778912a-bb63-423f-abdb-89c51359fb8a"><con:settings/><con:parameters><con:parameter><con:name>version</con:name><con:value>version</con:value><con:style>TEMPLATE</con:style><con:default>version</con:default></con:parameter><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter><con:parameter><con:name>program_id</con:name><con:value>{program_id}</con:value><con:style>QUERY</con:style><con:default>{program_id}</con:default></con:parameter></con:parameters><con:method name="Method 1" id="68dcceb8-9b58-4693-aee2-f6c101bb4f24" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="0c6d7d87-8bdb-450b-b683-a4bcddcec72c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "redeem": {
      "points_redeemed": "50",
      "transaction_number": "1234r743",
      "customer": { "mobile": "91712292522" },
      "notes": "Sample notes",
      "validation_code": "7S8VH7"
    }
  }
}</con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="program_id" value="1231"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="1486e61e-cd35-4606-b74b-5c6406abb01d" wadlVersion="http://wadl.dev.java.net/2009/02" name="getCustomerV1" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="get" path="/v1.1/customer/get" id="5e983fb5-e4dc-456e-bead-4a470764829c"><con:settings/><con:parameters><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter><con:parameter><con:name>id</con:name><con:value>{user_id}</con:value><con:style>QUERY</con:style><con:default>{user_id}</con:default></con:parameter><con:parameter><con:name>mlp</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default></con:parameter></con:parameters><con:method name="Method 1" id="700e2ddf-a659-4042-8dd9-8df792a13bc5" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="fffb4960-10e1-4ff0-982b-f7255dbe25c3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-CAP-CLIENT-COUNTRYCODE" value="1" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v1.1/customer/get</con:originalUri><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="378087418" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="fcc704d4-06ce-4de6-a1d4-738180ea26c5" wadlVersion="http://wadl.dev.java.net/2009/02" name="issueCoupon" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="issue" path="/v1.1/coupon/issue" id="9f92e04a-5c5b-45d0-9712-e7ddabfa844a"><con:settings/><con:parameters><con:parameter><con:name>user_id</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default></con:parameter><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter></con:parameters><con:method name="Method 1" id="e262157b-ca9f-474a-989a-793e74b49680" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="757eb83a-f2f8-4b87-82bf-8545223dbbc2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
   "root":{
      "coupon":[
         {
            "series_id":87618,
            "customer":{
               "mobile":"919090080344",
               "external_id":null,
               "email":null
            }
         }
      ]
   }
}</con:request><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="f5fc346f-3e9a-4165-8448-f6ce2cb69fdc" wadlVersion="http://wadl.dev.java.net/2009/02" name="RedeemCoupon" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="redeem" path="/v1.1/coupon/redeem" id="3c7e403a-9272-4ba1-8b24-5b3368163cea"><con:settings/><con:parameters><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter></con:parameters><con:method name="Method 1" id="84d1ca8a-673f-4398-becf-64469fbc920f" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="ff5fa5db-d484-4866-bf48-2ed0a1b8e3c1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "coupon": [{
      "code": "{{code}}",
      "redemption_time": "2017-09-17",
      "customer": {
        "mobile": "{{mobile1}}"
      },
      "custom_fields": {
        "field": {
          "name": "Sport",
          "value": "[“Soccer”]"
        }
      },
      "transaction": {
        "number":"{{billNumber}}",
        "amount": "1000"
      }
    }]
  }
}</con:request><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="7bd5e296-824e-4279-98ff-8dada1ff92fa" wadlVersion="http://wadl.dev.java.net/2009/02" name="isCouponRedeemable" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="isredeemable" path="/v1.1/coupon/isredeemable" id="de8547f9-9386-4efc-9c1b-dfd3166e43ed"><con:settings/><con:parameters><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter><con:parameter><con:name>details</con:name><con:value>true</con:value><con:style>QUERY</con:style><con:default>true</con:default></con:parameter><con:parameter><con:name>code</con:name><con:value>{coupon_code}</con:value><con:style>QUERY</con:style><con:default>{coupon_code}</con:default></con:parameter><con:parameter><con:name>mobile</con:name><con:value>{mobile}</con:value><con:style>QUERY</con:style><con:default>{mobile}</con:default></con:parameter></con:parameters><con:method name="Method 1" id="b60256fa-2b15-4f09-b4ae-5879f86d7367" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="2065919b-04a9-42cd-b6be-b621d97e53d4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="216dc5d8-4532-4e16-8aeb-831bca39e6a2" wadlVersion="http://wadl.dev.java.net/2009/02" name="getCouponSeries" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="series" path="/v1.1/coupon/series" id="e058e844-1c81-4c0a-a43e-9b09bc11e8b9"><con:settings/><con:parameters><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter></con:parameters><con:method name="Method 1" id="ace9d9a8-eb6f-4a05-93c9-aeab31251bb9" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="4f9fddd5-ff27-468f-9305-ddb2ae83c9ed" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v1.1/coupon/series</con:originalUri><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="2f59ebc7-7862-4705-9aa4-5f205643a0a9" wadlVersion="http://wadl.dev.java.net/2009/02" name="getCustomerCoupons" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="coupons" path="/v1.1/customer/coupons" id="cc3aad53-0998-4733-8201-36512ac5b31d"><con:settings/><con:parameters><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter><con:parameter><con:name>mobile</con:name><con:value>{mobile}</con:value><con:style>QUERY</con:style><con:default>{mobile}</con:default></con:parameter></con:parameters><con:method name="Method 1" id="d2677551-7e84-4275-919c-5a8d19151251" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="a83c3c0e-7af3-4d6d-b7d5-76c317dee5b5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="1d167895-41a8-4013-9475-73ed873bd3c3" wadlVersion="http://wadl.dev.java.net/2009/02" name="getCouponDetails" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="get" path="/v1.1/coupon/get" id="d32d3221-3fbb-4a67-b286-63f03fe45387"><con:settings/><con:parameters><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter><con:parameter><con:name>code</con:name><con:value>{code}</con:value><con:style>QUERY</con:style><con:default>{code}</con:default></con:parameter></con:parameters><con:method name="Method 1" id="52be3e16-8714-40c2-9998-1f35b6bdea81" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="b20f21c7-d621-4e58-b18d-b146a4c66139" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="79c18da1-2f79-4030-afc0-ed75ca661831" wadlVersion="http://wadl.dev.java.net/2009/02" name="PointsTransfer" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="transfer" path="/v2/points/transfer" id="1b7a9c33-0ba0-4701-bc78-0a9dc67059f4"><con:settings/><con:parameters/><con:method name="Method 1" id="8289658d-5f36-41be-b41d-11faa4c89d19" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="66016c4b-99ca-4eff-8f1e-3c10187c0c22" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "transferredAtStoreCode": "string",
  "transferredAtStoreID": 0,
  "pointsTobeTransferred": 0,
  "fromCustomerIdentifier": {
    "type": "MOBILE",
    "value": "string"
  },
  "toCustomerIdentifier": {
    "type": "MOBILE",
    "value": "string"
  },
  "notes": "string",
  "code": "string",
  "groupProgramTransfer": false
}</con:request><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5d90c9b2-daf9-4655-a09e-994747cdb1f8" wadlVersion="http://wadl.dev.java.net/2009/02" name="isPointsTransferable" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="isTransferrable" path="/v2/points/isTransferrable" id="3ca0226e-f428-4441-a805-a91854c831dd"><con:settings/><con:parameters/><con:method name="Method 1" id="dfeed04d-66e9-4cc3-9eb9-d4a7141b8e6e" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="0dcc0e21-afd7-4862-838c-ca8bcaeadc75" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
    "issueOtp": true,
    "pointsTobeTransferred": 1.1,
    "toCustomerIdentifier": {
        "type": "MOBILE",
        "value": "917709142209"
    },
    "fromCustomerIdentifier": {
        "type": "MOBILE",
        "value": "917332628259"
    }
}</con:request><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="f9e0c80e-598d-49ef-98ac-f19bbcb4f1fd" wadlVersion="http://wadl.dev.java.net/2009/02" name="returnRegularTransaction" type="rest" definitionUrl="htts" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="add" path="/v1.1/transaction/add" id="1121e52b-c3e8-463f-b2c2-471c7de88da4"><con:settings/><con:parameters><con:parameter><con:name>format</con:name><con:value>json</con:value><con:style>QUERY</con:style><con:default>json</con:default></con:parameter></con:parameters><con:method name="Method 1" id="fb853c35-7bdf-448a-ab98-231c2b4a0fcf" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="77cded7f-7736-4732-bd83-29e42c30f628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
	"root": {
		"transaction": {
			"type": "return",
			"bill_client_id": "wd221123333",
			"customer": {
				"firstname": "Rati",
				"lastname": "Ranjan",
				"email": "{{mobile1}}@mil.com",
				"mobile": "{{mobile1}}",
				"external_id": "X{{mobile1}}"
			},
			"transaction_number": "7u78118",
			"amount": "1000",
			"notes": "bill with note",
			"line_items": {
				"line_item": {
					"extended_fields": {
						"field": [{
								"name": "MetalRate",
								"value": 23
							},
							{
								"name": "MetalWeight",
								"value": 200
							}
						]
					},
					"serial": "0",
					"item_code": "t122",
					"description": "afvdfvd",
					"qty": "3",
					"rate": "1000",
					"value": "3000",
					"discount_value": "100",
					"amount": "8888",
					"cashier_id": "cash1233"
				}
			},
			"extended_fields": {
				"field": [{
						"name": "CentralGST",
						"value": 6
					},
					{
						"name": "StateGST",
						"value": 6
					}
				]
			},
			"payment_details": {
				"payment": {
					"mode": "CASH",
					"value": "100"
				}
			},
			"custom_fields": {
				"field": {
					"-name": "paymentmode",
					"value": "现金"
				}
			},
			"associate_details": {
				"code": "223232",
				"name": "afdf4r3"
			},
			"referral_code": "efef34343",
			"return_type": "FULL"
		}
	}
}</con:request><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="a2f3d0d0-8309-4edf-a0bd-969e38e4bb55" wadlVersion="http://wadl.dev.java.net/2009/02" name="updateOrgConfig" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#application_endpoint}</con:endpoint></con:endpoints><con:resource name="configs" path="/{version}/organization/configs" id="72004983-e818-4dff-9903-7a8ef1da5c14"><con:settings/><con:parameters><con:parameter><con:name>version</con:name><con:value>version</con:value><con:style>TEMPLATE</con:style><con:default>version</con:default></con:parameter><con:parameter><con:name>format</con:name><con:value>xml</con:value><con:style>QUERY</con:style><con:default>xml</con:default></con:parameter></con:parameters><con:method name="Method 1" id="3828eaaf-55d7-41c7-9c90-8277cd469974" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="9ae77cbf-a340-43f2-9a3b-e6cd9213c773" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>- no endpoint set -</con:endpoint><con:request><![CDATA[<root>
     <organization>
             <configs>
                     <config>
                             <name>CONF_LOYALTY_POINTS_REDEMPTION_LIFETIME_PURCHASE_MIN</name>
                             <scope>ORG</scope>
                             <value>0</value>
                            <entity_id>null</entity_id>
                     </config>
             </configs>
     </organization>
</root>]]></con:request><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="v1.1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="58906dd6-573e-4ca1-97d8-6660624d4ecd" wadlVersion="http://wadl.dev.java.net/2009/02" name="triggerCustomEvent" type="rest" definitionUrl="https" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT"/><con:endpoints><con:endpoint>https://${#Project#custom_events_webhook}</con:endpoint></con:endpoints><con:resource name="1b35496e-4126-4242-be3e-20f624766b67" path="" id="298f4f66-d3fe-4f25-bbf4-b8bbcf2e3706"><con:settings/><con:parameters/><con:method name="Method 1" id="bc2ab0db-9295-4bdf-ae1e-788c2302c95b" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="f773dd65-36e5-4368-91df-2c4c620e83d1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#custom_events_webhook}</con:endpoint><con:request>{"Mobile":"918733645468",
"Name":"stringxxx",
"Till":"alpha_endtoend_test",
"event_name":"AlphaEndToEnd"}</con:request><con:originalUri>https://8mo7zxjtj0.execute-api.us-east-1.amazonaws.com/onenightly/webhooks/1b35496e-4126-4242-be3e-20f624766b67</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="617b1441-f979-4855-baef-f5bc9610b80c" name="Reusable API" disabled="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">1000</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">false</con:setting></con:settings><con:runType>PARALLELL</con:runType><con:testCase id="a6919450-66f2-417f-9891-60d4219922a2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TransactionAdd" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get txn numer" id="ebafad87-9920-45df-a6d0-64a324a881a2"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
log.info timestamp
testRunner.testCase.setPropertyValue("tnx_number",timestamp);</script></con:config></con:testStep><con:testStep type="groovy" name="get current date and time" id="022d35e4-b48a-4ff3-afa8-fdccd2adeb35"><con:settings/><con:config><script>def getcurrent = Calendar.getInstance()
String current_time = getcurrent.format("yyyy-MM-dd HH:mm:ss");
testRunner.testCase.testSuite.setPropertyValue("current_time",current_time);</script></con:config></con:testStep><con:testStep type="groovy" name="get phone number" id="e2d7ab90-5188-4717-be44-f6c409db964c"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
String mobile = timestamp.substring(3);
testRunner.testCase.setPropertyValue("mobile",mobile);</script></con:config></con:testStep><con:testStep type="restrequest" name="addTransaction" id="dc6dd2e1-ece2-4167-9d0e-390ca93e8be6"><con:settings/><con:config service="addRegularTransaction" resourcePath="/v1.1/transaction/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="addTransaction" id="30d7b033-bada-4cf6-abdf-781b858869dc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "transaction": {
      "type": "regular",
      "number": "${#TestCase#tnx_number}",
      "amount": "1200",
      "billing_time": "${#TestSuite#current_time}",
      "gross_amount": "101",
      "redemptions": {
        "points_redemptions": {

        },
        "coupon_redemptions": {

        }
      },
      "customer": {
        "mobile": "${#TestCase#mobile}",
        "firstname": "fname_${#TestCase#mobile}",
        "lastname": "lname_${#TestCase#mobile}",
        "email": "${#TestCase#mobile}@gmail.com",
        "type": "loyalty"
      },
      "custom_fields": {
        "field": {
          "name": "testcustom",
          "value": "test"
        }
      },
      "extended_fields": {
        "field": {
          "name": "CentralGST",
          "value": "98"
        }
      },
      "line_items": {
        "line_item": [
          {
            "attributes": {
              "attribute": {
                "name": "jeans",
                "value": "jeans"
              }
            },
            "serial": "1",
            "amount": "500",
            "description": "White",
            "item_code": "Pearls",
            "qty": "20",
            "rate": "50",
            "value": "1000",
            "discount": "0",
            "notes": "Return type of a line item with full"
          },
          {
            "attributes": {
              "attribute": {
                "name": "jeans",
                "value": "jeans"
              }
            },
            "serial": "2",
            "amount": "500",
            "description": "Extra",
            "item_code": "Extra",
            "qty": "10",
            "rate": "50",
            "value": "500",
            "discount": "0",
            "notes": "Return type of a line item with full"
          },
          {
            "attributes": {
              "attribute": {
                "name": "jeans",
                "value": "jeans"
              }
            },
            "serial": "3",
            "amount": "700",
            "description": "Extra",
            "item_code": "Extra",
            "qty": "1",
            "rate": "700",
            "value": "700",
            "discount": "0",
            "notes": "Return type of a line item with full"
          }
        ]
      }
    }
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/transaction/add</con:originalUri><con:assertion type="GroovyScriptAssertion" id="e6f1b9ef-b7b8-4fc0-b402-4192ca816b85" name="Verfiy add transaction response"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


String mob = context.expand('${#TestCase#mobile}')
String tnxNumber = context.expand('${#TestCase#tnx_number}')

// Get customer point info before the tnx.


//get transaction details
String tnxID = json.response.transactions.transaction.id[0].toString();
String billNumber = json.response.transactions.transaction.number[0].toString();
String type = json.response.transactions.transaction.type[0].toString();

assert(billNumber == tnxNumber);
messageExchange.modelItem.testCase.setPropertyValue("tnxID",tnxID);


//get customer details.

String user_id = json.response.transactions.transaction.customer[0].user_id.toString();
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);
String mobile = json.response.transactions.transaction.customer[0].mobile.toString();
assert(mobile == "91"+mob);
messageExchange.modelItem.testCase.setPropertyValue("tnx_mobile",mobile);
String fname = json.response.transactions.transaction.customer[0].firstname.toString();
assert(fname == "fname_" + mob);
String lname = json.response.transactions.transaction.customer[0].lastname.toString();
assert(lname == "lname_" + mob);
String email = json.response.transactions.transaction.customer[0].email.toString();
assert(email == mob + "@gmail.com")

String awarded_points = json.response.transactions.transaction.side_effects[0].effect.awarded_points[0].toString();
String totalPoints = json.response.transactions.transaction.side_effects[0].effect.total_points[0].toString();

messageExchange.modelItem.testCase.setPropertyValue("awarded_points_afterTnx",awarded_points);

messageExchange.modelItem.testCase.setPropertyValue("totalPoints_afterTnx",totalPoints);



//Item status.
assert(json.response.transactions.transaction.item_status[0].success == "true")
assert(json.response.transactions.transaction.item_status[0].code == 600)
String msg = json.response.transactions.transaction.item_status[0].message;
if(msg.toLowerCase() == "transaction added successfully"){
	assert true;
}
else{
	assert false : "Getting message as - " + msg;
}
</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="190ad7c6-4b58-4bce-a46d-8f3e1521b68c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tnx_number</con:name><con:value>1589299543014</con:value></con:property><con:property><con:name>tnxID</con:name><con:value>38248612</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378971977</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9299543018</con:value></con:property><con:property><con:name>awarded_points_afterTnx</con:name><con:value>null</con:value></con:property><con:property><con:name>totalPoints_afterTnx</con:name><con:value>null</con:value></con:property><con:property><con:name>pointBalance_afterTnx</con:name><con:value>null</con:value></con:property><con:property><con:name>tnx_mobile</con:name><con:value>919299543018</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>mobile</con:name><con:value>8767496655</con:value></con:property><con:property><con:name>current_time</con:name><con:value>2020-05-18 11:56:16</con:value></con:property></con:properties></con:testSuite><con:testSuite id="b7186296-ce49-40a4-8956-65b39421bc62" name="All_Events_Flows_Are_Pushing_Fine_Over_Webhook"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b4789551-1d5f-46bd-bdba-b8c0119d65a7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Event_CustomerAdd" searchProperties="true"><con:description>Pre-Requisite :
1. Webhook created.
2. Loyalty program added with default program having strategy -
    a) On customer registration there would be a point allocation to cuatomer of any amount.
   b) There is a promotion point of any amount during cuatomer registration.</con:description><con:settings/><con:testStep type="groovy" name="Groovy Script" id="b10818fb-1123-4385-b87e-b99aeb2f7327" disabled="true"><con:settings/><con:config><script>def demoinstance = new Demo();
log.info("Greeting" + demoinstance.hello());</script></con:config></con:testStep><con:testStep type="httprequest" name="reset my webhook workspace before moving ahead" id="0a237cc2-74b3-4cbc-af77-d8cffeec53c1"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32b3cc09-1f89-46c2-b490-b844cbf09632" name="reset my webhook workspace before moving ahead" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#webhook_workspace}/api/events/reset</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="get unique phone number and email to register" id="88e636c2-72fe-4ad6-8f0d-d09309c87ce0"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
String mobile = timestamp.substring(3);
testRunner.testCase.testSuite.setPropertyValue("mobile","91" + mobile);</script></con:config></con:testStep><con:testStep type="restrequest" name="register a new customer" id="f282289d-1e50-45a7-972b-a56a2b148cfb"><con:settings/><con:config service="customer_add" resourcePath="/{version}/customer/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="register a new customer" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "${#TestSuite#mobile}",
        "email": "${#TestSuite#mobile}@gmail.com",

        "firstname": "fname_${#TestSuite#mobile}",
        "lastname": "lname_${#TestSuite#mobile}",
        "external_id": "x${#TestSuite#mobile}",
        "gender": "M",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "122001"
					}
				]
			}

      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6561825e-a822-4b5a-8d71-764b779e304e" name="Status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5b1e5a91-9733-4e79-a8df-37a1c6ca91ff" name="capture request id"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id",req_id);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358bd7c4-10af-4b97-9e52-6af837cb76b9" name="validate customer registration data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


//assert success holder in response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert customer data.

assert(json.response.customers.customer.user_id.size() == 1);

String user_id = json.response.customers.customer.user_id[0];
String f_name = json.response.customers.customer.firstname[0];
String l_name = json.response.customers.customer.lastname[0];
String mobile = json.response.customers.customer.mobile[0];
String email = json.response.customers.customer.email[0];
String lifetime_points = json.response.customers.customer.lifetime_points[0];
String loyalty_points = json.response.customers.customer.loyalty_points[0];
String current_slab = json.response.customers.customer.current_slab[0];

String lifetime_purchases = json.response.customers.customer.lifetime_purchases[0];
String type = json.response.customers.customer.type[0];
String source = json.response.customers.customer.source[0];
String mobile_reg = context.expand('${#TestSuite#mobile}');







assert(lifetime_purchases == "0") // as this is new customer with no transactions.
assert(mobile == mobile_reg)
assert(json.response.customers.customer.subscriptions[0].subscription.size() == 4) // as we have configured 4 subscription while adding a customer.
assert(f_name == "fname_" + mobile_reg);
assert(l_name == "lname_" + mobile_reg);
assert(email == mobile_reg + "@gmail.com");
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.testSuite.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.setPropertyValue("lifetime_points",lifetime_points.toString());
messageExchange.modelItem.testCase.setPropertyValue("loyalty_points",loyalty_points.toString());





//item status.

assert(json.response.customers.customer.item_status[0].success == "true")
assert(json.response.customers.customer.item_status[0].code == "1000")
if(json.response.customers.customer.item_status[0].message == "Customer registration successful"){
	assert true;
}
else{
	assert false : "customer registration not done! " + json.response.customers.customer.item_status[0].message
}
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get webhooks and fetch webhook consumer id" id="7561891d-ae8a-487d-a216-0bb84b89b15b"><con:settings/><con:config service="getWebhooks" resourcePath="/{version}/webHooks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get webhooks and fetch webhook consumer id" id="e34c812d-806e-498b-adbd-323081eda9a6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd5d1a2f-529b-492a-bf27-f3681c66848c" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b9a1562a-b14d-4245-a079-7407ffcc3c36" name="get webhook consumer id by webhook name"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def webhook_names = json.data.name;
def my_webhook = context.expand('${#Project#webhook_workspace_name}');
int index = 0;
String consumer_id = "";
for(name in webhook_names){
	if(name == my_webhook){
		consumer_id = json.data.consumerGroupId[index];
	}
	index++;
}

messageExchange.modelItem.testCase.testSuite.setPropertyValue("webhook_consumerID",consumer_id);</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="v3" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get loyalty program info for customer" id="6693a1cf-f93d-47c9-b393-df54e1346fce"><con:settings/><con:config service="getCustomerV2" resourcePath="/v2/customers/{user_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get loyalty program info for customer" id="35a353eb-1756-4e37-83f8-d8c4a290f0aa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v2/customers/376790377</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="396dd36d-730e-404e-bac9-0e2754e38fa0" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db44dbb0-61ac-473b-ac62-0e0c1d71ee5f" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

messageExchange.modelItem.testCase.setPropertyValue("loyaltyType",json.loyaltyInfo.loyaltyType);
messageExchange.modelItem.testCase.setPropertyValue("source",json.loyaltyInfo.attributionV2.createdFromSource);
messageExchange.modelItem.testCase.setPropertyValue("till_code",json.loyaltyInfo.attributionV2.createdBy.code);
messageExchange.modelItem.testCase.setPropertyValue("till_name",json.loyaltyInfo.attributionV2.createdBy.name);





// Gets loyalty points info.
int count = json.loyaltyProgramDetails.loyaltyPoints.size();

ArrayList<Integer> lstLifeTimePoints = new ArrayList<>();
ArrayList<Integer> lstLoyaltyPoints = new ArrayList<>();
ArrayList<String> lstCurrentSlabs = new ArrayList<>();
ArrayList<Integer> lstProgramIds = new ArrayList<>();
ArrayList<String> lstProgramTitles = new ArrayList<>();

for(i = 0;i<count;i++){
	int loyaltypoints = json.loyaltyProgramDetails.loyaltyPoints[i];
	int lifetimepoints = json.loyaltyProgramDetails.lifetimePoints[i];
	if(loyaltypoints == 0){
		continue;
	}
	String currSlabs = json.loyaltyProgramDetails.currentSlab[i].toString()
	int programID = json.loyaltyProgramDetails.programId[i];
	String programTitle = json.loyaltyProgramDetails.programTitle[i].toString()
	lstLifeTimePoints.add(lifetimepoints);
	lstLoyaltyPoints.add(loyaltypoints);
	lstCurrentSlabs.add(currSlabs);
	lstProgramIds.add(programID)
	lstProgramTitles.add(programTitle);
	}

//Settign the details at test case level.
messageExchange.modelItem.testCase.setPropertyValue("lstLifeTimePoints_AfterTnx",lstLifeTimePoints.inspect());
messageExchange.modelItem.testCase.setPropertyValue("lstLoyaltyPoints_AfterTnx",lstLoyaltyPoints.inspect());
messageExchange.modelItem.testCase.setPropertyValue("lstCurrentSlabs_AfterTnx",lstCurrentSlabs.inspect());
messageExchange.modelItem.testCase.setPropertyValue("lstProgramIds_AfterTnx",lstProgramIds.inspect());
messageExchange.modelItem.testCase.setPropertyValue("lstProgramTitles_AfterTnx",lstProgramTitles.inspect());







]]></scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="user_id" value="${#TestCase#user_id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="wait for a while" id="32aff57d-f72a-4fdb-9c3d-72ecfa1ef1a2" disabled="true"><con:settings/><con:config><delay>20000</delay></con:config></con:testStep><con:testStep type="restrequest" name="validate the event log in mongo via an API" id="bb22ebf6-3c43-48d6-900f-1093ae6a7bac" disabled="true"><con:settings/><con:config service="getEventLogs" resourcePath="/{version}/webHooks/eventLog/requestId/{request_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="validate the event log in mongo via an API" id="c3c5f177-ed07-4079-aa2d-e3b654c037ab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic Y20uMToyMDJjYjk2MmFjNTkwNzViOTY0YjA3MTUyZDIzNGI3MA==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a67073e-d145-4c5f-90bf-7b2955e84d93" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac07e8a1-01a4-49a8-9e5d-6e28d324525f" name="Validate &quot;Customer Added&quot; events pushed"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def consumers = json.data.consumerGroupId;

int index = 0;
String my_consumer = context.expand('${#TestSuite#webhook_consumerID}');

ArrayList&lt;String> eventNames = new ArrayList();

ArrayList&lt;Integer> consumersStatus = new ArrayList();

for(consumer in consumers){
	if(consumer == my_consumer){
		String event_name = json.data.eventName[index];
		def consumerResponse = json.data.consumerResponse[index]
		assert(consumerResponse != null) : "Consumer response is NULL "
		int status = json.data.consumerResponse[index].webhookHttpStatus;
		eventNames.add(event_name);
		consumersStatus.add(status);
	}
	index++;
}

int eventCount = eventNames.size()
messageExchange.modelItem.testCase.setPropertyValue("events",eventNames.inspect())
messageExchange.modelItem.testCase.setPropertyValue("eventStatus",consumersStatus.inspect())

//all status should be 200
for(String status : consumersStatus){
	assert status == "200"
}
//customerAdded event should be pushed, as that is triggered as part of test case.
assert('customerAdded' in eventNames)</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="version" value="v3"/>
  <con:entry key="request_id" value="${#TestCase#request_id}"/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>request_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="httprequest" name="validate response data in webhook" id="77328294-93fc-4c70-95f6-1b7b95f83c67" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="a8d53e36-26fb-4c1a-8c27-d0cb991becfb" name="validate response data in webhook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#webhook_workspace}/api/events</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6f4c5385-a53b-43e7-bbcb-3e084abfe072" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b125b22a-5024-494c-b2f4-26382b2aaa51" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

int bodyCount = json.body.size();
def events = Eval.me(context.expand('${#TestCase#events}'))
def eventsInConsumer = json.body.eventName

messageExchange.modelItem.testCase.setPropertyValue('eventsReceived',eventsInConsumer.inspect())
assert(bodyCount == events.size())

assert('customerAdded' in eventsInConsumer)

for(int i = 0;i&lt;bodyCount;i++){
	String event_name = json.body[i].eventName;
	log.info event_name;
	if(event_name == "customerAdded"){
		def loyaltyType = json.body[i].data.loyaltyType;
		def source = json.body[i].data.source;
		def firstName = json.body[i].data.firstName;
		def lastName = json.body[i].data.lastName;
		def tillcode = json.body[i].data.enteredBy.till.code;
		def tillname = json.body[i].data.enteredBy.till.name;
		def storecode = json.body[i].data.enteredBy.store.code;
		def storename = json.body[i].data.enteredBy.store.name;
		def cust_id = json.body[i].data.customerIdentifiers.customerId.toString();
		def mobile = json.body[i].data.customerIdentifiers.intouch.mobile;
		def email = json.body[i].data.customerIdentifiers.intouch.email;

		def loyalty_type = context.expand('${#TestCase#loyaltyType}');
		def loyalty_source = context.expand('${#TestCase#source}');
		def f_name = "fname_" + context.expand('${#TestSuite#mobile}');
		def l_name = "lname_" + context.expand('${#TestSuite#mobile}');
		def till_code = context.expand('${#TestCase#till_code}');
		def till_name = context.expand('${#TestCase#till_name}');
		def user_id = context.expand('${#TestSuite#user_id}');
		def user_mobile = context.expand('${#TestSuite#mobile}');
		def user_email = context.expand('${#TestSuite#mobile}') + "@gmail.com";


	}

}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>request_id</con:name><con:value>${#TestCase#request_id}</con:value><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}
</con:setupScript><con:properties><con:property><con:name>request_id</con:name><con:value>0fe1dd57-38b0-4d53-ba1b-971612084379</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378989600</con:value></con:property><con:property><con:name>lifetime_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyalty_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyaltyType</con:name><con:value>loyalty</con:value></con:property><con:property><con:name>source</con:name><con:value>instore</con:value></con:property><con:property><con:name>till_code</con:name><con:value>endtoend_test</con:value></con:property><con:property><con:name>till_name</con:name><con:value>endtoend_test</con:value></con:property><con:property><con:name>lstLifeTimePoints_AfterTnx</con:name><con:value>[180]</con:value></con:property><con:property><con:name>lstLoyaltyPoints_AfterTnx</con:name><con:value>[180]</con:value></con:property><con:property><con:name>lstCurrentSlabs_AfterTnx</con:name><con:value>['Silver']</con:value></con:property><con:property><con:name>lstProgramIds_AfterTnx</con:name><con:value>[796]</con:value></con:property><con:property><con:name>lstProgramTitles_AfterTnx</con:name><con:value>['SOAP_AUTOMATIONDefaultProgram']</con:value></con:property><con:property><con:name>eventCount</con:name><con:value/></con:property><con:property><con:name>events</con:name><con:value/></con:property><con:property><con:name>eventStatus</con:name><con:value/></con:property><con:property><con:name>eventsReceived</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="955e792e-1531-4a94-a652-34ff3ad3d8d1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Event_RegularTransactionAdd" searchProperties="true"><con:description>Pre-Requisite :
1. Webhook created.
2. Loyalty program added with default program having strategy -
    a) On customer registration there would be a point allocation to cuatomer of any amount.
   b) There is a promotion point of any amount during cuatomer registration.</con:description><con:settings/><con:testStep type="httprequest" name="reset my webhook workspace before moving ahead" id="748aa764-7477-49a4-afd9-9bb87732723d" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="32b3cc09-1f89-46c2-b490-b844cbf09632" name="reset my webhook workspace before moving ahead" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#webhook_workspace}/api/events/reset</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="restrequest" name="get customer points info before tnx" id="cc8575db-d680-4343-8d05-7944db279f4a"><con:settings/><con:config service="getCustomerV2" resourcePath="/v2/customers/{user_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get customer points info before tnx" id="35a353eb-1756-4e37-83f8-d8c4a290f0aa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v2/customers/376790377</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="396dd36d-730e-404e-bac9-0e2754e38fa0" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db44dbb0-61ac-473b-ac62-0e0c1d71ee5f" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

messageExchange.modelItem.testCase.setPropertyValue("loyaltyType",json.loyaltyInfo.loyaltyType);
messageExchange.modelItem.testCase.setPropertyValue("source",json.loyaltyInfo.attributionV2.createdFromSource);
messageExchange.modelItem.testCase.setPropertyValue("till_code",json.loyaltyInfo.attributionV2.createdBy.code);
messageExchange.modelItem.testCase.setPropertyValue("till_name",json.loyaltyInfo.attributionV2.createdBy.name);



// setting everything as blank
messageExchange.modelItem.testCase.setPropertyValue("loyaltyPoints","");
	messageExchange.modelItem.testCase.setPropertyValue("lifetimepointsPoints","")
	messageExchange.modelItem.testCase.setPropertyValue("currentSlab","")
	messageExchange.modelItem.testCase.setPropertyValue("nextSlab","")
	messageExchange.modelItem.testCase.setPropertyValue("programID","")
	messageExchange.modelItem.testCase.setPropertyValue("programTitle","")

int count = json.loyaltyProgramDetails.loyaltyPoints.size();

for(i = 0;i&lt;count;i++){
	int loyaltypoints = json.loyaltyProgramDetails.loyaltyPoints[i];

	if(loyaltypoints == 0) continue;
	int lifetimepoints = json.loyaltyProgramDetails.lifetimePoints[i];
	messageExchange.modelItem.testCase.setPropertyValue("loyaltyPoints",loyaltypoints.toString());
	messageExchange.modelItem.testCase.setPropertyValue("lifetimepointsPoints",lifetimepoints.toString())
	messageExchange.modelItem.testCase.setPropertyValue("currentSlab",json.loyaltyProgramDetails.currentSlab[i].toString())
	messageExchange.modelItem.testCase.setPropertyValue("nextSlab",json.loyaltyProgramDetails.nextSlab[i].toString())
	messageExchange.modelItem.testCase.setPropertyValue("programID",json.loyaltyProgramDetails.programId[i].toString())
	messageExchange.modelItem.testCase.setPropertyValue("programTitle",json.loyaltyProgramDetails.programTitle[i].toString())
	messageExchange.modelItem.testCase.setPropertyValue("cumulativePurchases",json.loyaltyProgramDetails.cumulativePurchases[i].toString())
}








</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="user_id" value="${#TestSuite#user_id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get a unique tnx number" id="61c01556-6ee2-401e-b886-1ed223730489"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
testRunner.testCase.setPropertyValue("tnx_number",timestamp);</script></con:config></con:testStep><con:testStep type="restrequest" name="add a regular transaction" id="fa32481f-1e2d-4bfb-a36d-5534d59f6a9c"><con:settings/><con:config service="addRegularTransaction" resourcePath="/v1.1/transaction/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="add a regular transaction" id="30d7b033-bada-4cf6-abdf-781b858869dc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
	"root": {
		"transaction": {
			"bill_client_id": "${#TestSuite#mobile}",
			"type": "regular",
			"number": "${#TestCase#tnx_number}",
			"notes": "2 lin1e items",
			"amount" : 2000,
			"gross_amount": "100",
			"discount": "10",
			"customer": {
				"mobile": "${#TestSuite#mobile}",
				"email": "${#TestSuite#mobile}@gmail.com",
				"external_id": "x${#TestSuite#mobile}",
				"firstname": "fname_${#TestSuite#mobile}",
				"lastname": "lname_${#TestSuite#mobile}"
			},
			"extended_fields": {
				"field": [{
						"name": "ship_first_name",
						"value": "fname_${#TestSuite#mobile}"
					},
					{
						"name": "ship_last_name",
						"value": "lname_${#TestSuite#mobile}"
					}
				]
			},
			"custom_fields": {

				"field": [{
						"name": "bankdetails",
						"value": "SBI"
					},
					{
						"name": "bankdetails",
						"value": "SBI"
					}
				]

			},
			"line_items": {
				"line_item": [{
						"extended_fields": {
							"field": [{
									"name": "MetalRate",
									"value": 23
								},
								{
									"name": "service_tax_amount",
									"value": 100
								}
							]
						},
						"serial": "1",
						"amount": "500",
						"description": "soap",
						"item_code": "item-001",
						"qty": "50",
						"rate": "10",
						"value": "500",
						"attributes": {
							"attribute": {
								"name": "brand",
								"value": "Levis"
							}
						}
					},
					{
						"extended_fields": {
							"field": [{
									"name": "DesignCode",
									"value": "jmh6677"
								},
								{
									"name": "SupplierCode",
									"value": "hgjy111"
								}
							]
						},
						"serial": "2",
						"amount": "500",
						"description": "soap",
						"item_code": "item-001",
						"qty": "50",
						"rate": "10",
						"value": "500",
						"transaction_number": "niBill1",
						"attributes": {
							"attribute": {
								"name": "brand",
								"value": "Levis"
							}
						}
					},
					{
						"extended_fields": {
							"field": [{
									"name": "StoneCharge",
									"value": 22
								},
								{
									"name": "MakingCharge",
									"value": 11
								}
							]
						},
						"serial": "3",
						"item_code": "t122",
						"description": "afvdfvd",
						"qty": "3",
						"rate": "1000",
						"value": "3000",
						"discount_value": "100",
						"amount": "2900",
						"cashier_id": "cash1233",
						"transaction_number": "previousBill1"
					}
				]
			},
			"associate_details": {
				"code": "hiraxdhara",
				"name": "Tom Sawyer"
			}
		}
	}
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/transaction/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1e361c9e-3bde-431e-a3ca-af4c4199f182" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7e1f7598-72ef-4e4d-bf6c-c718fff7750c" name="capture request ID"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id",req_id);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7fac582-133e-4ed0-8c17-d64cda91eb65" name="verify transaction details"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


String mob = context.expand('${#TestSuite#mobile}')
String tnxNumber = context.expand('${#TestCase#tnx_number}')
String cumulativePurchases = context.expand('${#TestCase#cumulativePurchases}');

//asserting status of response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


// Get customer point info before the tnx.

String loyaltyPoints_beforetnx = context.expand('${#TestCase#loyaltyPoints}')


//get transaction details
String tnxID = json.response.transactions.transaction.id[0].toString();
String billNumber = json.response.transactions.transaction.number[0].toString();
String type = json.response.transactions.transaction.type[0].toString();

assert(billNumber == tnxNumber);
messageExchange.modelItem.testCase.setPropertyValue("tnxID",tnxID);


//get customer details.

String user_id = json.response.transactions.transaction.customer[0].user_id.toString();
String cust_id = context.expand('${#TestSuite#user_id}');
//assert(user_id == cust_id);
String mobile = json.response.transactions.transaction.customer[0].mobile.toString();
assert(mobile == mob);
String fname = json.response.transactions.transaction.customer[0].firstname.toString();
assert(fname == "fname_" + mob);
String lname = json.response.transactions.transaction.customer[0].lastname.toString();
assert(lname == "lname_" + mob);
String email = json.response.transactions.transaction.customer[0].email.toString();
assert(email == mob + "@gmail.com")
String externalID = json.response.transactions.transaction.customer[0].external_id.toString();
assert(externalID == "x" + mob);
String lifetimePoints = json.response.transactions.transaction.customer[0].lifetime_points.toString();
messageExchange.modelItem.testCase.setPropertyValue("lifetimePoints_afterTnx",lifetimePoints);
String loyaltyPoints = json.response.transactions.transaction.customer[0].loyalty_points.toString();
messageExchange.modelItem.testCase.setPropertyValue("loyaltyPoints_afterTnx",loyaltyPoints);
String currentSlab = json.response.transactions.transaction.customer[0].current_slab.toString();
messageExchange.modelItem.testCase.setPropertyValue("currentSlab_afterTnx",currentSlab);
String lifetime_purchases = json.response.transactions.transaction.customer[0].lifetime_purchases.toString();
messageExchange.modelItem.testCase.setPropertyValue("lifetime_puchases_afterTnx",lifetime_purchases);



String user_type = json.response.transactions.transaction.customer[0].type.toString();

String source = json.response.transactions.transaction.customer[0].source.toString();

//get side effects of transactions done.
String awarded_points = json.response.transactions.transaction.side_effects[0].effect.awarded_points[0].toString();

String totalPoints = json.response.transactions.transaction.side_effects[0].effect.total_points[0].toString();
String pointBalance = json.response.transactions.transaction.points_balance[0].toString();

messageExchange.modelItem.testCase.setPropertyValue("awarded_points_afterTnx",awarded_points);


messageExchange.modelItem.testCase.setPropertyValue("totalPoints_afterTnx",totalPoints);


//Item status.
assert(json.response.transactions.transaction.item_status[0].success == "true")
assert(json.response.transactions.transaction.item_status[0].code == 600)
String msg = json.response.transactions.transaction.item_status[0].message;
if(msg == "Transaction added successfully"){
	assert true;
}
else{
	assert false : "Status message mismatch - " + msg;
}
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get webhooks and fetch webhook consumer id" id="5b5f0860-bcdf-4493-8fde-951f37f4afd7"><con:settings/><con:config service="getWebhooks" resourcePath="/{version}/webHooks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get webhooks and fetch webhook consumer id" id="e34c812d-806e-498b-adbd-323081eda9a6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd5d1a2f-529b-492a-bf27-f3681c66848c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b9a1562a-b14d-4245-a079-7407ffcc3c36" name="fetch consumer id"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def webhook_names = json.data.name;
def my_webhook = context.expand('${#Project#webhook_name}');
int index = 0;
String consumer_id = "";
for(name in webhook_names){
	if(name == my_webhook){
		consumer_id = json.data.consumerGroupId[index];
	}
	index++;
}

messageExchange.modelItem.testCase.setPropertyValue("webhook_consumerID",consumer_id);</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="v3" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get loyalty program info for customer" id="06a2b06e-21db-4251-a953-5039c915f041"><con:settings/><con:config service="getCustomerV2" resourcePath="/v2/customers/{user_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get loyalty program info for customer" id="35a353eb-1756-4e37-83f8-d8c4a290f0aa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v2/customers/376790377</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="396dd36d-730e-404e-bac9-0e2754e38fa0" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db44dbb0-61ac-473b-ac62-0e0c1d71ee5f" name="Script Assertion"><con:configuration><scriptText><![CDATA[import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

messageExchange.modelItem.testCase.setPropertyValue("loyaltyType",json.loyaltyInfo.loyaltyType);
messageExchange.modelItem.testCase.setPropertyValue("source",json.loyaltyInfo.attributionV2.createdFromSource);
messageExchange.modelItem.testCase.setPropertyValue("till_code",json.loyaltyInfo.attributionV2.createdBy.code);
messageExchange.modelItem.testCase.setPropertyValue("till_name",json.loyaltyInfo.attributionV2.createdBy.name);





// Gets loyalty points info.
int count = json.loyaltyProgramDetails.loyaltyPoints.size();

ArrayList<Integer> lstLifeTimePoints = new ArrayList<>();
ArrayList<Integer> lstLoyaltyPoints = new ArrayList<>();
ArrayList<String> lstCurrentSlabs = new ArrayList<>();
ArrayList<Integer> lstProgramIds = new ArrayList<>();
ArrayList<String> lstProgramTitles = new ArrayList<>();

for(i = 0;i<count;i++){
	int loyaltypoints = json.loyaltyProgramDetails.loyaltyPoints[i];
	int lifetimepoints = json.loyaltyProgramDetails.lifetimePoints[i];
	String currSlabs = json.loyaltyProgramDetails.currentSlab[i].toString()
	int programID = json.loyaltyProgramDetails.programId[i];
	String programTitle = json.loyaltyProgramDetails.programTitle[i].toString()
	lstLifeTimePoints.add(lifetimepoints);
	lstLoyaltyPoints.add(loyaltypoints);
	lstCurrentSlabs.add(currSlabs);
	lstProgramIds.add(programID)
	lstProgramTitles.add(programTitle);
	}

//Settign the details at test case level.
messageExchange.modelItem.testCase.setPropertyValue("lstLifeTimePoints_AfterTnx",lstLifeTimePoints.inspect());
messageExchange.modelItem.testCase.setPropertyValue("lstLoyaltyPoints_AfterTnx",lstLoyaltyPoints.inspect());
messageExchange.modelItem.testCase.setPropertyValue("lstCurrentSlabs_AfterTnx",lstCurrentSlabs.inspect());
messageExchange.modelItem.testCase.setPropertyValue("lstProgramIds_AfterTnx",lstProgramIds.inspect());
messageExchange.modelItem.testCase.setPropertyValue("lstProgramTitles_AfterTnx",lstProgramTitles.inspect());













]]></scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="user_id" value="${#TestSuite#user_id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="wait for a while" id="71c1a90a-e9e4-4ffa-ac32-7c7d6748d152" disabled="true"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="restrequest" name="validate the event log in mongo via an API" id="eeea1bad-eb9f-4f7d-b1a3-de0f14041d5b" disabled="true"><con:settings/><con:config service="getEventLogs" resourcePath="/{version}/webHooks/eventLog/requestId/{request_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="validate the event log in mongo via an API" id="c3c5f177-ed07-4079-aa2d-e3b654c037ab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic Y20uMToyMDJjYjk2MmFjNTkwNzViOTY0YjA3MTUyZDIzNGI3MA==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a67073e-d145-4c5f-90bf-7b2955e84d93" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac07e8a1-01a4-49a8-9e5d-6e28d324525f" name="validate the events pushed status"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def consumers = json.data.consumerGroupId;
int index = 0;
String my_consumer = context.expand('${#TestCase#webhook_consumerID}');
ArrayList&lt;String> eventNames = new ArrayList();
ArrayList&lt;Integer> consumersStatus = new ArrayList();
for(consumer in consumers){
	if(consumer == my_consumer){
		String event_name = json.data.eventName[index];
		def consumerResponse = json.data.consumerResponse[index]
		assert(consumerResponse != null) : "Consumer response is NULL"
		int status = json.data.consumerResponse[index].webhookHttpStatus;
		eventNames.add(event_name);
		consumersStatus.add(status);
	}
	index++;
}

log.info eventNames

messageExchange.modelItem.testCase.setPropertyValue("events",eventNames.inspect())
messageExchange.modelItem.testCase.setPropertyValue("eventStatus",consumersStatus.inspect())

//all status should be 200
for(String status : consumersStatus){
	assert status == "200"
}
//transactionAdded event should be pushed, as that is triggered as part of test case.
assert('transactionAdded' in eventNames)





</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="version" value="v3"/>
  <con:entry key="request_id" value="${#TestCase#request_id}"/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>request_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="httprequest" name="validate response data in webhook" id="04494dd1-6a4e-45f6-bef1-4efc69f32c46" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="a8d53e36-26fb-4c1a-8c27-d0cb991becfb" name="validate response data in webhook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#webhook_workspace}/api/events</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6f4c5385-a53b-43e7-bbcb-3e084abfe072" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b125b22a-5024-494c-b2f4-26382b2aaa51" name="validate the payload data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

//Get the Json object.
String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

// validating the numner of events pushed.
int bodyCount = json.body.size();
int expectedEventCount = Integer.parseInt(context.expand('${#TestCase#eventsCount}'));
assert(bodyCount == expectedEventCount) : "Expected " + expectedEventCount + " events to be pushed in webhook, but getting - " + bodyCount;

// gettig  the points related info from previous response.

def lstLifeTImePoints = context.expand('${#TestCase#lstLifeTimePoints_AfterTnx}')
def lstLoyaltyPoints = context.expand('${#TestCase#lstLoyaltyPoints_AfterTnx}')
def lstCurrSlabs = context.expand('${#TestCase#lstCurrentSlabs_AfterTnx}')
def lstProgramIds = context.expand('${#TestCase#lstProgramIds_AfterTnx}')
def lstProgramTitles = context.expand('${#TestCase#lstProgramTitles_AfterTnx}')
def mobileNum = context.expand('${#TestSuite#mobile}');
def userID = context.expand('${#TestSuite#user_id}');
def cumulativePurchase = context.expand('${#TestCase#lifetime_puchases_afterTnx}');

def lifeTimePoints_list = Eval.me(lstLifeTImePoints)
def loyaltyPoints_list = Eval.me(lstLoyaltyPoints);
def currSlabs_list = Eval.me(lstCurrSlabs);
def programIds_list = Eval.me(lstProgramIds);
def programTitles_list = Eval.me(lstProgramTitles);

ArrayList&lt;String> eventNames = new ArrayList();

// for each event pushed validate the payload data.
for(int i = 0;i&lt;bodyCount;i++){
	String event_name = json.body[i].eventName;
	log.info event_name;
	if(event_name == "pointsIssued"){
		int loyaltyProgramID = json.body[i].data.loyaltyProgramId;

		assert(loyaltyProgramID in programIds_list) : "Program ID through which points is issue is mismatched";

		for(int j = 0; j &lt; programIds_list.size();j++) {
			if(programIds_list.get(j) != loyaltyProgramID){
				continue;
			}

			def expectedLifeTimePoints = lifeTimePoints_list.get(j);
			def expectedloyaltyPoints = loyaltyPoints_list.get(j);
			def expectedcurrSlab = currSlabs_list.get(j);
			def expectedProgramID = programIds_list.get(j);
			def expectedProgramName = programTitles_list.get(j);


			// get the points info from response.
			def programCurrentPoints = json.body[i].data.programCurrentPoints;
			def programLifetimePoints = json.body[i].data.programLifetimePoints;
			def totalPointsIssued = json.body[i].data.totalPointsIssued;
			def regularPointsIssued = json.body[i].data.regularPointsIssued;
			def promotionPoints = json.body[i].data.promotionalPointsIssued.promotionPoints[0];
			def triggeringActivityName = json.body[i].data.triggeringActivity.name
			def cust_id = json.body[i].data.customerIdentifiers.customerId.toString();
			def mobile = json.body[i].data.customerIdentifiers.intouch.mobile
			def email = json.body[i].data.customerIdentifiers.intouch.email

			assert(loyaltyProgramID == expectedProgramID);
			assert(programCurrentPoints == expectedloyaltyPoints);
			assert(programLifetimePoints == expectedLifeTimePoints);
			//assert(totalPointsIssued == expectedloyaltyPoints);
			//assert(regularPointsIssued == expectedloyaltyPoints);
			assert(triggeringActivityName=="TransactionAdd");
			assert(cust_id == userID);
			assert(mobile == mobileNum);
			assert(email == mobileNum + "@gmail.com");
		}

	}
	else if(event_name == "transactionAdded"){
		def amount = json.body[i].data.amount;
		def billClientID = json.body[i].data.billClientId;
		def billNumber = json.body[i].data.billNumber;
		def transactionId = json.body[i].data.transactionId.toString();
		def lineItemCount = json.body[i].data.lineItemCount;
		def discount = json.body[i].data.discount;
		def grossAmount = json.body[i].data.grossAmount;
		def cust_id = json.body[i].data.customerIdentifiers.customerId.toString();

		//get tnx info
		def tnxNumber = context.expand('${#TestCase#tnx_number}');
		def tnxID = context.expand('${#TestCase#tnxID}');

		assert(amount == 50000);
		assert(billNumber == tnxNumber);
		assert(transactionId == tnxID);
		assert(billClientID == mobileNum);
		assert(lineItemCount == 2); // as while addign tnx , line item was 2.
		assert(discount == 10);
		assert(grossAmount == 100);
		assert(cust_id == userID);
}
	else if(event_name == "customerUpdated"){
		def loyaltyType = json.body[i].data.loyaltyType.toLowerCase();
		def source = json.body[i].data.source;
		def firstName = json.body[i].data.firstName;
		def lastName = json.body[i].data.lastName;
		def tillcode = json.body[i].data.enteredBy.till.code;
		def tillname = json.body[i].data.enteredBy.till.name;
		def storecode = json.body[i].data.enteredBy.store.code;
		def storename = json.body[i].data.enteredBy.store.name;
		def cust_id = json.body[i].data.customerIdentifiers.customerId.toString();
		def mobile = json.body[i].data.customerIdentifiers.intouch.mobile;
		def email = json.body[i].data.customerIdentifiers.intouch.email;
		def externalID = json.body[i].data.customerIdentifiers.intouch.externalId;

		def loyalty_type = context.expand('${#TestCase#loyaltyType}');
		def loyalty_source = context.expand('${#TestCase#source}');
		def f_name = "fname_" + mobileNum
		def l_name = "lname_" + mobileNum
		def till_code = context.expand('${#TestCase#till_code}');
		def till_name = context.expand('${#TestCase#till_name}');

		assert(loyaltyType == loyalty_type);
		assert(source == loyalty_source);
		assert(firstName == f_name);
		assert(lastName == l_name);
		assert(tillcode == till_code);
		assert(tillname == till_name);
		assert(cust_id == userID);
		assert(mobile == mobileNum);
		assert(email == mobileNum + "@gmail.com");
		assert(externalID == "x" + mobileNum);
}
	else{
		assert false : "unexpected event triggered - " + event_name;
	}
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>request_id</con:name><con:value>${#TestCase#request_id}</con:value><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}
</con:setupScript><con:properties><con:property><con:name>tnx_number</con:name><con:value/></con:property><con:property><con:name>request_id</con:name><con:value/></con:property><con:property><con:name>tnxID</con:name><con:value/></con:property><con:property><con:name>lifetimePoints_afterTnx</con:name><con:value/></con:property><con:property><con:name>loyaltyPoints_afterTnx</con:name><con:value/></con:property><con:property><con:name>currentSlab_afterTnx</con:name><con:value/></con:property><con:property><con:name>lifetime_puchases_afterTnx</con:name><con:value/></con:property><con:property><con:name>awarded_points_afterTnx</con:name><con:value/></con:property><con:property><con:name>totalPoints_afterTnx</con:name><con:value/></con:property><con:property><con:name>webhook_consumerID</con:name><con:value/></con:property><con:property><con:name>loyaltyType</con:name><con:value/></con:property><con:property><con:name>source</con:name><con:value/></con:property><con:property><con:name>till_code</con:name><con:value/></con:property><con:property><con:name>till_name</con:name><con:value/></con:property><con:property><con:name>lstLifeTimePoints_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstLoyaltyPoints_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstCurrentSlabs_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstProgramIds_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstProgramTitles_AfterTnx</con:name><con:value/></con:property><con:property><con:name>loyaltyPoints</con:name><con:value/></con:property><con:property><con:name>lifetimepointsPoints</con:name><con:value/></con:property><con:property><con:name>currentSlab</con:name><con:value/></con:property><con:property><con:name>nextSlab</con:name><con:value/></con:property><con:property><con:name>programID</con:name><con:value/></con:property><con:property><con:name>programTitle</con:name><con:value/></con:property><con:property><con:name>cumulativePurchases</con:name><con:value/></con:property><con:property><con:name>eventsCount</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="2a379719-45cc-4477-8829-0cd103a804d5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Event_PointsRedeem" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="get customer points and program details" id="796ae79e-a638-4f28-a63a-dd507a4424d4"><con:settings/><con:config service="getCustomerV1" resourcePath="/v1.1/customer/get" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get customer points and program details" id="fffb4960-10e1-4ff0-982b-f7255dbe25c3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-CAP-CLIENT-COUNTRYCODE" value="1" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v1.1/customer/get</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="02d2cebb-039a-4534-8e56-928705e1fb33" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d0632a8-44fc-4060-813d-6f01d3ba2e30" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

// assert status contents.

assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")

//get point summary details.

int numOfLinkedProgram = json.response.customers.customer.points_summaries[0].points_summary.programId.size()

for(int i = 0;i&lt;numOfLinkedProgram;i++){
	float loyaltyPoints = Float.parseFloat(json.response.customers.customer.points_summaries[0].points_summary.loyaltyPoints[i])
	if(loyaltyPoints == 0){
		continue;
	}
	String programID = json.response.customers.customer.points_summaries[0].points_summary.programId[i]

	int pointsToBeRedeemed = loyaltyPoints  * (0.05)

	messageExchange.modelItem.testCase.setPropertyValue("programID",programID)
	messageExchange.modelItem.testCase.setPropertyValue("loyaltyPoints",loyaltyPoints.toString())
	messageExchange.modelItem.testCase.setPropertyValue("pointsToBeRedeemed",pointsToBeRedeemed.toString())
	break;
}
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestSuite#user_id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="check if point is redeemable against a program" id="f4f681f0-d175-41f4-8f7b-703c0b108442"><con:settings/><con:config service="isRedeemable" resourcePath="/{version}/points/isredeemable" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="check if point is redeemable against a program" id="7324ca5d-555c-46eb-892f-02a744545f27" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/version/points/isredeemable</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a80ef4a5-8fce-466f-8319-f3dc33227562" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="67346059-a930-44fc-b3af-1c326b88c74c" name="assert isRedeemable response contents"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


String mobile = context.expand('${#TestSuite#mobile}')
int points = Integer.parseInt(context.expand('${#TestCase#pointsToBeRedeemed}'))

//asssert the status.

assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert points redeemable info
assert(json.response.points.redeemable.is_redeemable == "true")

assert(json.response.points.redeemable.mobile == mobile)
assert(json.response.points.redeemable.email == mobile + "@gmail.com")
assert(json.response.points.redeemable.external_id == "x" + mobile)

assert(json.response.points.redeemable.points == points)
assert(json.response.points.redeemable.item_status.success == "true")
assert(json.response.points.redeemable.item_status.message == "Points can be redeemed")

//get redeemable value.
messageExchange.modelItem.testCase.setPropertyValue("pointsRedeemableValue",json.response.points.redeemable.points_redeem_value.toString())
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="program_id" value="${#TestCase#programID}"/>
  <con:entry key="mobile" value="${#TestSuite#mobile}"/>
  <con:entry key="version" value="v1.1"/>
  <con:entry key="points" value="${#TestCase#pointsToBeRedeemed}"/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>format</con:entry><con:entry>points</con:entry><con:entry>skip_validation</con:entry><con:entry>mobile</con:entry><con:entry>program_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="redeem the points against a program" id="8611ade5-d04d-4481-8a4b-42a6f3bee800"><con:settings/><con:config service="RedeemPoints" resourcePath="/{version}/points/redeem" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="redeem the points against a program" id="0c6d7d87-8bdb-450b-b683-a4bcddcec72c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "redeem": {
      "points_redeemed": "${#TestCase#pointsToBeRedeemed}",
      "transaction_number": "bill_${#TestSuite#mobile}",
      "customer": { "mobile": "${#TestSuite#mobile}" },
      "notes": "Sample notes",
      "validation_code": "7S8VH7"
    }
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/points/redeem</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="40c1f224-0d3b-4f25-ab58-e2d1c015aeb5" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="452086b6-2fa3-4a9c-9180-bde153efda5a" name="validate the response contents"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


String mobile = context.expand('${#TestSuite#mobile}')
String points = (context.expand('${#TestCase#pointsToBeRedeemed}'))
String user_id = context.expand('${#TestSuite#user_id}')
String pointsRedeemableValue = context.expand('${#TestCase#pointsRedeemableValue}')
String loyaltyPoints = context.expand('${#TestCase#loyaltyPoints}')

//asssert the status.

assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")

// assert the points responses

assert(json.response.responses.points.mobile == mobile)
assert(json.response.responses.points.email == mobile + "@gmail.com")
assert(json.response.responses.points.external_id == "x" + mobile)
assert(json.response.responses.points.user_id == user_id)
assert(json.response.responses.points.points_redeemed == points)
assert(json.response.responses.points.redeemed_value.toString() == pointsRedeemableValue)

log.info json.response.responses.points.side_effects.effect.currency_value[0]
//assert side effects
assert(json.response.responses.points.side_effects.effect.num_points[0].toString() == points)
//assert(json.response.responses.points.side_effects.effect.currency_value[0].toString() == pointsRedeemableValue)
assert(json.response.responses.points.side_effects.effect.validation_code[0] == "7S8VH7") // same is passed oin request.
assert(json.response.responses.points.side_effects.effect.redeemed_on_bill_number[0] == "bill_" + mobile)
assert(json.response.responses.points.side_effects.effect.type[0] == "points")

//assert item status
assert(json.response.responses.points.item_status.success == "true")
assert(json.response.responses.points.item_status.message == "Points Redeemed")




</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0195406a-03c1-4a71-9f78-bc6989b0b710" name="capture request ID"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id",req_id);</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="program_id" value="${#TestCase#programID}"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get webhooks and fetch webhook consumer id" id="f413474d-15bf-4540-8a08-92f526a17150"><con:settings/><con:config service="getWebhooks" resourcePath="/{version}/webHooks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get webhooks and fetch webhook consumer id" id="e34c812d-806e-498b-adbd-323081eda9a6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd5d1a2f-529b-492a-bf27-f3681c66848c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b9a1562a-b14d-4245-a079-7407ffcc3c36" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def webhook_names = json.data.name;
def my_webhook = context.expand('${#Project#webhook_name}');
int index = 0;
String consumer_id = "";
for(name in webhook_names){
	if(name == my_webhook){
		consumer_id = json.data.consumerGroupId[index];
	}
	index++;
}

messageExchange.modelItem.testCase.setPropertyValue("webhook_consumerID",consumer_id);</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="v3" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="wait for a while" id="60dcca03-45cb-4b8e-bbde-85be3b5a9e6f" disabled="true"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="validate the event log in mongo via an API" id="0a25b23b-6c39-4362-83b8-8cd7239bf10a" disabled="true"><con:settings/><con:config service="getEventLogs" resourcePath="/{version}/webHooks/eventLog/requestId/{request_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="validate the event log in mongo via an API" id="c3c5f177-ed07-4079-aa2d-e3b654c037ab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic Y20uMToyMDJjYjk2MmFjNTkwNzViOTY0YjA3MTUyZDIzNGI3MA==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a67073e-d145-4c5f-90bf-7b2955e84d93" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac07e8a1-01a4-49a8-9e5d-6e28d324525f" name="validate the events pushed status"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def consumers = json.data.consumerGroupId;
int index = 0;
String my_consumer = context.expand('${#TestCase#webhook_consumerID}');
ArrayList&lt;String> eventNames = new ArrayList();
ArrayList&lt;Integer> consumersStatus = new ArrayList();
for(consumer in consumers){
	if(consumer == my_consumer){
		String event_name = json.data.eventName[index];
		int status = json.data.consumerResponse[index].webhookHttpStatus;
		eventNames.add(event_name);
		consumersStatus.add(status);
	}
	index++;
}

def lstLoyalityPoints = context.expand('${#TestCase#lstLoyaltyPoints_AfterTnx}');
def loyaltyPointsAfterTnx = Eval.me(lstLoyalityPoints);

int pointIssuedEvent = loyaltyPointsAfterTnx.size();
int customerUpdated = 1;
int transactionAdd = 1

int numberOfevents = pointIssuedEvent + customerUpdated + transactionAdd;
messageExchange.modelItem.testCase.setPropertyValue("eventsCount",numberOfevents.toString());

assert(eventNames.size() == numberOfevents)
assert(consumersStatus.size() == numberOfevents)
assert("pointsIssued" in eventNames)
assert("customerUpdated" in eventNames)
assert("transactionAdded" in eventNames)
for(int j = 0;j&lt;numberOfevents;j++){
assert(consumersStatus.get(j) == 200): "Webhook event status failed";
}



</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="version" value="v3"/>
  <con:entry key="request_id" value="${#TestCase#request_id}"/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>request_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="httprequest" name="validate response data in webhook" id="9182bab1-e4f2-4063-a920-379d99cd4026" disabled="true"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="a8d53e36-26fb-4c1a-8c27-d0cb991becfb" name="validate response data in webhook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#webhook_workspace}/api/events</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6f4c5385-a53b-43e7-bbcb-3e084abfe072" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b125b22a-5024-494c-b2f4-26382b2aaa51" name="validate the payload data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

//Get the Json object.
String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

// validating the numner of events pushed.
int bodyCount = json.body.size();
int expectedEventCount = Integer.parseInt(context.expand('${#TestCase#eventsCount}'));
assert(bodyCount == expectedEventCount) : "Expected " + expectedEventCount + " events to be pushed in webhook, but getting - " + bodyCount;

// gettig  the points related info from previous response.

def lstLifeTImePoints = context.expand('${#TestCase#lstLifeTimePoints_AfterTnx}')
def lstLoyaltyPoints = context.expand('${#TestCase#lstLoyaltyPoints_AfterTnx}')
def lstCurrSlabs = context.expand('${#TestCase#lstCurrentSlabs_AfterTnx}')
def lstProgramIds = context.expand('${#TestCase#lstProgramIds_AfterTnx}')
def lstProgramTitles = context.expand('${#TestCase#lstProgramTitles_AfterTnx}')
def mobileNum = context.expand('${#TestSuite#mobile}');
def userID = context.expand('${#TestSuite#user_id}');
def cumulativePurchase = context.expand('${#TestCase#lifetime_puchases_afterTnx}');

def lifeTimePoints_list = Eval.me(lstLifeTImePoints)
def loyaltyPoints_list = Eval.me(lstLoyaltyPoints);
def currSlabs_list = Eval.me(lstCurrSlabs);
def programIds_list = Eval.me(lstProgramIds);
def programTitles_list = Eval.me(lstProgramTitles);

ArrayList&lt;String> eventNames = new ArrayList();

// for each event pushed validate the payload data.
for(int i = 0;i&lt;bodyCount;i++){
	String event_name = json.body[i].eventName;
	log.info event_name;
	if(event_name == "pointsIssued"){
		int loyaltyProgramID = json.body[i].data.loyaltyProgramId;

		assert(loyaltyProgramID in programIds_list) : "Program ID through which points is issue is mismatched";

		for(int j = 0; j &lt; programIds_list.size();j++) {
			if(programIds_list.get(j) != loyaltyProgramID){
				continue;
			}

			def expectedLifeTimePoints = lifeTimePoints_list.get(j);
			def expectedloyaltyPoints = loyaltyPoints_list.get(j);
			def expectedcurrSlab = currSlabs_list.get(j);
			def expectedProgramID = programIds_list.get(j);
			def expectedProgramName = programTitles_list.get(j);


			// get the points info from response.
			def programCurrentPoints = json.body[i].data.programCurrentPoints;
			def programLifetimePoints = json.body[i].data.programLifetimePoints;
			def totalPointsIssued = json.body[i].data.totalPointsIssued;
			def regularPointsIssued = json.body[i].data.regularPointsIssued;
			def promotionPoints = json.body[i].data.promotionalPointsIssued.promotionPoints[0];
			def triggeringActivityName = json.body[i].data.triggeringActivity.name
			def cust_id = json.body[i].data.customerIdentifiers.customerId.toString();
			def mobile = json.body[i].data.customerIdentifiers.intouch.mobile
			def email = json.body[i].data.customerIdentifiers.intouch.email

			assert(loyaltyProgramID == expectedProgramID);
			assert(programCurrentPoints == expectedloyaltyPoints);
			assert(programLifetimePoints == expectedLifeTimePoints);
			//assert(totalPointsIssued == expectedloyaltyPoints);
			//assert(regularPointsIssued == expectedloyaltyPoints);
			assert(triggeringActivityName=="TransactionAdd");
			assert(cust_id == userID);
			assert(mobile == mobileNum);
			assert(email == mobileNum + "@gmail.com");
		}

	}
	else if(event_name == "transactionAdded"){
		def amount = json.body[i].data.amount;
		def billClientID = json.body[i].data.billClientId;
		def billNumber = json.body[i].data.billNumber;
		def transactionId = json.body[i].data.transactionId.toString();
		def lineItemCount = json.body[i].data.lineItemCount;
		def discount = json.body[i].data.discount;
		def grossAmount = json.body[i].data.grossAmount;
		def cust_id = json.body[i].data.identifiers.customerId.toString();

		//get tnx info
		def tnxNumber = context.expand('${#TestCase#tnx_number}');
		def tnxID = context.expand('${#TestCase#tnxID}');

		assert(amount == 50000);
		assert(billNumber == tnxNumber);
		assert(transactionId == tnxID);
		assert(billClientID == mobileNum);
		assert(lineItemCount == 2); // as while addign tnx , line item was 2.
		assert(discount == 10);
		assert(grossAmount == 100);
		assert(cust_id == userID);
}
	else if(event_name == "customerUpdated"){
		def loyaltyType = json.body[i].data.loyaltyType.toLowerCase();
		def source = json.body[i].data.source;
		def firstName = json.body[i].data.firstName;
		def lastName = json.body[i].data.lastName;
		def tillcode = json.body[i].data.updatedBy.till.code;
		def tillname = json.body[i].data.updatedBy.till.name;
		def storecode = json.body[i].data.updatedBy.store.code;
		def storename = json.body[i].data.updatedBy.store.name;
		def cust_id = json.body[i].data.identifiers.customerId.toString();
		def mobile = json.body[i].data.identifiers.intouch.mobile;
		def email = json.body[i].data.identifiers.intouch.email;
		def externalID = json.body[i].data.identifiers.intouch.externalId;

		def loyalty_type = context.expand('${#TestCase#loyaltyType}');
		def loyalty_source = context.expand('${#TestCase#source}');
		def f_name = "fname_" + mobileNum
		def l_name = "lname_" + mobileNum
		def till_code = context.expand('${#TestCase#till_code}');
		def till_name = context.expand('${#TestCase#till_name}');

		assert(loyaltyType == loyalty_type);
		assert(source == loyalty_source);
		assert(firstName == f_name);
		assert(lastName == l_name);
		assert(tillcode == till_code);
		assert(tillname == till_name);
		assert(cust_id == userID);
		assert(mobile == mobileNum);
		assert(email == mobileNum + "@gmail.com");
		assert(externalID == "x" + mobileNum);
}
	else{
		assert false : "unexpected event triggered - " + event_name;
	}
}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>request_id</con:name><con:value>${#TestCase#request_id}</con:value><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}</con:setupScript><con:properties><con:property><con:name>programID</con:name><con:value>796</con:value></con:property><con:property><con:name>loyaltyPoints</con:name><con:value>620.0</con:value></con:property><con:property><con:name>pointsToBeRedeemed</con:name><con:value>31</con:value></con:property><con:property><con:name>pointsRedeemableValue</con:name><con:value>31</con:value></con:property><con:property><con:name>request_id</con:name><con:value>1262b610-db37-438d-b8d2-4f444b091cc3</con:value></con:property><con:property><con:name>webhook_consumerID</con:name><con:value>befe1b9f-7948-4540-8794-3c0a6fc073bb</con:value></con:property></con:properties></con:testCase><con:testCase id="6903a80b-ebb7-4c60-9542-a9d7c49352de" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Event_CouponRedeem" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="get available coupon series" id="b4ba82f5-4b39-45d4-908e-b65dad414c62"><con:settings/><con:config service="getCouponSeries" resourcePath="/v1.1/coupon/series" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get available coupon series" id="4f9fddd5-ff27-468f-9305-ddb2ae83c9ed" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v1.1/coupon/series</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b0d2f436-53e8-4e27-b51b-0d421eb77084" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b28b8532-434e-484c-bd5a-c7008dae554d" name="get coupon series details"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

// assert status contents.

assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//get series items details

int numOfSeries = json.response.series.items.item.id.size()
assert(numOfSeries != 0) : "No coupon series are available for the org "
int randomNumber = 0
if(numOfSeries > 1){
 randomNumber =Math.abs( new Random().nextInt() % ((numOfSeries-1) - 0) ) + 0
}
String couponID = json.response.series.items.item.id[randomNumber]
String couponDescription = json.response.series.items.item.description[randomNumber]
String couponSeriesCode = json.response.series.items.item.series_code[randomNumber]
String validTillDate = json.response.series.items.item.valid_till_date[randomNumber]
String discountCode = json.response.series.items.item.discount_code[randomNumber]
String discountType = json.response.series.items.item.discount_type[randomNumber]
String discountValue = json.response.series.items.item.discount_value[randomNumber]
String discountON = json.response.series.items.item.discount_on[randomNumber]
String info = json.response.series.items.item.info[randomNumber]

messageExchange.modelItem.testCase.setPropertyValue("couponID",couponID)
messageExchange.modelItem.testCase.setPropertyValue("couponDescription",couponDescription)
messageExchange.modelItem.testCase.setPropertyValue("couponSeriesCode",couponSeriesCode)
messageExchange.modelItem.testCase.setPropertyValue("validTillDate",validTillDate)
messageExchange.modelItem.testCase.setPropertyValue("discountCode",discountCode)
messageExchange.modelItem.testCase.setPropertyValue("discountType",discountType)
messageExchange.modelItem.testCase.setPropertyValue("discountValue",discountValue)
messageExchange.modelItem.testCase.setPropertyValue("discountON",discountON)
messageExchange.modelItem.testCase.setPropertyValue("info",info)


</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="issue a coupon to customer" id="59ed5b8d-8810-4686-9863-75ee98d28d30"><con:settings/><con:config service="issueCoupon" resourcePath="/v1.1/coupon/issue" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="issue a coupon to customer" id="757eb83a-f2f8-4b87-82bf-8545223dbbc2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
   "root":{
      "coupon":[
         {
            "series_id":${#TestCase#couponID},
            "customer":{
               "mobile":"${#TestSuite#mobile}",
               "external_id":null,
               "email":null
            }
         }
      ]
   }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/coupon/issue</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9256196d-a982-499e-8421-1147cbe2b80d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="972e2e36-a5a1-49bd-8937-5f2298aa71be" name="assert response contents"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

// assert status contents.

assert(json.response.status.success == true)
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")

//assert coupon content
String couponCode = json.response.coupon.code
String seriesID = json.response.coupon.series_id
String description = json.response.coupon.description
String discountcode = json.response.coupon.discount_code
String validTill = json.response.coupon.valid_till
String discountType = json.response.coupon.discount_type
String discountValue = json.response.coupon.discount_value
String discountOn = json.response.coupon.discount_on
String detailedInfo = json.response.coupon.detailed_info

messageExchange.modelItem.testCase.setPropertyValue("couponCode",couponCode)
//assert(couponCode == context.expand('${#TestCase#couponSeriesCode}'))
assert(seriesID == context.expand('${#TestCase#couponID}'))
assert(description == context.expand('${#TestCase#couponDescription}'))
assert(validTill == context.expand('${#TestCase#validTillDate}'))
assert(discountType == context.expand('${#TestCase#discountType}'))
assert(discountValue == context.expand('${#TestCase#discountValue}'))
assert(discountOn == context.expand('${#TestCase#discountON}'))
assert(detailedInfo == context.expand('${#TestCase#info}'))




//assert item status

assert(json.response.coupon.item_status.success == true)
assert(json.response.coupon.item_status.message == "Coupon processing successful")



</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="validate if coupon is redeemable" id="c7ff398a-1acb-42de-8974-0ec276e3cc47"><con:settings/><con:config service="isCouponRedeemable" resourcePath="/v1.1/coupon/isredeemable" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="validate if coupon is redeemable" id="2065919b-04a9-42cd-b6be-b621d97e53d4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v1.1/coupon/isredeemable</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1cb40d93-a36c-42ef-a341-f3c6a90b6781" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1aba48d3-c0c2-4cef-9527-a2b2eb62965a" name="assert isredeemable response content"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

// assert status contents.

assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")

//assert redeemable status

String mobile = json.response.coupons.redeemable.mobile
String code = json.response.coupons.redeemable.code

assert(mobile == context.expand('${#TestSuite#mobile}'))
assert(code == context.expand('${#TestCase#couponCode}'))
assert(json.response.coupons.redeemable.is_redeemable == "true")

//assert series info

String description = json.response.coupons.redeemable.series_info.description
String discountCode = json.response.coupons.redeemable.series_info.discount_code
String validTill = json.response.coupons.redeemable.series_info.valid_till
String discountType = json.response.coupons.redeemable.series_info.discount_type
String discountValue = json.response.coupons.redeemable.series_info.discount_value
String discountOn = json.response.coupons.redeemable.series_info.discount_on
String detailedInfo = json.response.coupons.redeemable.series_info.detailed_info

assert(description == context.expand('${#TestCase#couponDescription}'))
assert(discountCode == context.expand('${#TestCase#discountCode}'))
assert(validTill == context.expand('${#TestCase#validTillDate}'))
assert(discountType == context.expand('${#TestCase#discountType}'))
assert(discountValue == context.expand('${#TestCase#discountValue}'))
assert(discountOn == context.expand('${#TestCase#discountON}'))
assert(detailedInfo == context.expand('${#TestCase#info}'))

//assert customer details
assert(json.response.coupons.redeemable.customer.mobile == context.expand('${#TestSuite#mobile}'))
assert(json.response.coupons.redeemable.customer.email == context.expand('${#TestSuite#mobile}') + "@gmail.com")

//assert item status
assert(json.response.coupons.redeemable.item_status.success == "true")
assert(json.response.coupons.redeemable.item_status.status == "true")
assert(json.response.coupons.redeemable.item_status.message == "Coupon isRedeem successful")
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="code" value="${#TestCase#couponCode}"/>
  <con:entry key="mobile" value="${#TestSuite#mobile}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="customer redeem a coupon against a transaction" id="b34effe1-2aae-47bb-b2e3-e8f6f24ed3ed"><con:settings/><con:config service="RedeemCoupon" resourcePath="/v1.1/coupon/redeem" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="customer redeem a coupon against a transaction" id="ff5fa5db-d484-4866-bf48-2ed0a1b8e3c1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "coupon": [{
      "code": "${#TestCase#couponCode}",
      "redemption_time": "${=new java.text.SimpleDateFormat('yyyy-MM-dd').format(new Date())}",
      "customer": {
        "mobile": "${#TestSuite#mobile}"
      },
      "custom_fields": {
        "field": {
          "name": "Sport",
          "value": "[“Soccer”]"
        }
      },
      "transaction": {
        "number":"${Event_RegularTransactionAdd#tnx_number}",
        "amount": "1000"
      }
    }]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/coupon/redeem</con:originalUri><con:assertion type="GroovyScriptAssertion" id="92bf951b-fc8d-45db-851c-d85662bbaa11" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

// assert status contents.

assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")

//assert customer info
assert(json.response.coupons.coupon.customer.mobile == context.expand('${#TestSuite#mobile}'))
assert(json.response.coupons.coupon.customer.email == context.expand('${#TestSuite#mobile}') + "@gmail.com")

//assert coupon information

String couponCode = json.response.coupons.coupon.code
String discountCode = json.response.coupons.coupon.discount_code
String seriesCode = json.response.coupons.coupon.series_code
String couponValue = json.response.coupons.coupon.coupon_value

assert(couponCode == context.expand('${#TestCase#couponCode}'))
assert(discountCode == context.expand('${#TestCase#discountCode}'))
assert(seriesCode == context.expand('${#TestCase#couponID}'))
assert(couponValue == context.expand('${#TestCase#discountValue}'))

//assert transaction info
assert(json.response.coupons.coupon.transaction.number == context.expand('${Event_RegularTransactionAdd#tnx_number}'))

//assert item status
assert(json.response.coupons.coupon.item_status.success == "true")
assert(json.response.coupons.coupon.item_status.message == "Coupon processing successful")
</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="249be6ad-3cfa-47ce-9622-9847c1297eb3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get customer coupon information" id="568b84e0-70ff-4b13-a953-90476af0f38a"><con:settings/><con:config service="getCustomerCoupons" resourcePath="/v1.1/customer/coupons" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get customer coupon information" id="a83c3c0e-7af3-4d6d-b7d5-76c317dee5b5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v1.1/customer/coupons</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9fea8a10-7bb4-4ecc-8480-cd804ce7a6bb" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7693549a-de2d-4dd2-8b23-84148fd05f12" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

// assert status contents.

assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")

//assert customer information

assert(json.response.customers.customer.mobile[0] == context.expand('${#TestSuite#mobile}'))
assert(json.response.customers.customer.email[0] == context.expand('${#TestSuite#mobile}') + "@gmail.com")
assert(json.response.customers.customer.id[0] == context.expand('${#TestSuite#user_id}'))
assert(json.response.customers.customer.mobile[0] == context.expand('${#TestSuite#mobile}'))

//assert coupons information

assert(json.response.customers.customer.coupons[0].coupon.series_id[0] == context.expand('${#TestCase#couponID}'))
assert(json.response.customers.customer.coupons[0].coupon.series_name[0] == context.expand('${#TestCase#couponDescription}'))
assert(json.response.customers.customer.coupons[0].coupon.code[0] == context.expand('${#TestCase#couponCode}'))

//assert redemption details

assert(json.response.customers.customer.coupons[0].coupon.redemptions[0].redemption.transaction_number[0] == context.expand('${Event_RegularTransactionAdd#tnx_number}'))

String store_code = json.response.customers.customer.coupons[0].coupon.redemptions[0].redemption.redeemed_at[0].code
String storename = json.response.customers.customer.coupons[0].coupon.redemptions[0].redemption.redeemed_at[0].name


//asssert the item status

assert(json.response.customers.customer.item_status[0].success == "true")
assert(json.response.customers.customer.item_status[0].message == "Coupons retrieved successfully")
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="mobile" value="${#TestSuite#mobile}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}</con:setupScript><con:properties><con:property><con:name>couponID</con:name><con:value>121186</con:value></con:property><con:property><con:name>couponDescription</con:name><con:value>EndtoEndTestCoupon</con:value></con:property><con:property><con:name>couponSeriesCode</con:name><con:value>E68RFUIR</con:value></con:property><con:property><con:name>validTillDate</con:name><con:value>2120-05-13</con:value></con:property><con:property><con:name>discountCode</con:name><con:value>NO_VALUE</con:value></con:property><con:property><con:name>discountType</con:name><con:value>ABS</con:value></con:property><con:property><con:name>discountValue</con:name><con:value>200</con:value></con:property><con:property><con:name>discountON</con:name><con:value>BILL</con:value></con:property><con:property><con:name>info</con:name><con:value>EndtoEndTestCoupon</con:value></con:property><con:property><con:name>couponCode</con:name><con:value>4U9WHH6L</con:value></con:property></con:properties></con:testCase><con:testCase id="8136e2ea-77d0-4875-95ad-08c63f483b85" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Event_PointsTransfer" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="update CONF_LOYALTY_POINTS_REDEMPTION_LIFETIME_PURCHASE_MIN to 0" id="c38c7b23-4c59-4162-b716-88bb1b372006"><con:settings/><con:config service="updateOrgConfig" resourcePath="/{version}/organization/configs" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="update CONF_LOYALTY_POINTS_REDEMPTION_LIFETIME_PURCHASE_MIN to 0" id="9ae77cbf-a340-43f2-9a3b-e6cd9213c773" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request><![CDATA[<root>
     <organization>
             <configs>
                     <config>
                             <name>CONF_LOYALTY_POINTS_REDEMPTION_LIFETIME_PURCHASE_MIN</name>
                             <scope>ORG</scope>
                             <value>0</value>
                            <entity_id>null</entity_id>
                     </config>
             </configs>
     </organization>
</root>]]></con:request><con:originalUri>https://nightly.capillary.in/v1.1/organization/configs</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="db6beb72-0a54-41ce-a045-9d6bef8bc8f9" name="Valid HTTP Status Codes" disabled="true"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="v1.1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="update CONF_DISABLE_OTP_POINTS_TRANSFER to 1" id="3e86f8ab-40a0-43a0-9e61-6eac87ebe97a"><con:settings/><con:config service="updateOrgConfig" resourcePath="/{version}/organization/configs" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="update CONF_DISABLE_OTP_POINTS_TRANSFER to 1" id="9ae77cbf-a340-43f2-9a3b-e6cd9213c773" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request><![CDATA[<root>
     <organization>
             <configs>
                     <config>
                             <name>CONF_DISABLE_OTP_POINTS_TRANSFER</name>
                             <scope>ORG</scope>
                             <value>1</value>
                            <entity_id>1522</entity_id>
                     </config>
             </configs>
     </organization>
</root>]]></con:request><con:originalUri>https://nightly.capillary.in/v1.1/organization/configs</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="db6beb72-0a54-41ce-a045-9d6bef8bc8f9" name="Valid HTTP Status Codes" disabled="true"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="v1.1" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get unique mobile number to register" id="243a9275-ed64-4d7e-a306-cdb62f09d06a"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
String mobile = timestamp.substring(3);
testRunner.testCase.setPropertyValue("mobile1","91" + mobile);</script></con:config></con:testStep><con:testStep type="restrequest" name="register a new customer" id="2c27433b-8dbd-4a04-a69a-6a8c88d159ef"><con:settings/><con:config service="customer_add" resourcePath="/{version}/customer/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="register a new customer" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "${#TestCase#mobile1}",
        "email": "${#TestCase#mobile1}@gmail.com",

        "firstname": "fname_${#TestCase#mobile1}",
        "lastname": "lname_${#TestCase#mobile1}",
        "gender": "M",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "122001"
					}
				]
			},
        "custom_fields": {
          "field": [
            {
              "name": "Hobbies",
              "value": "[“Fitness”]"
            }
          ]
        }

      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6561825e-a822-4b5a-8d71-764b779e304e" name="Status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5b1e5a91-9733-4e79-a8df-37a1c6ca91ff" name="capture request id"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id",req_id);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358bd7c4-10af-4b97-9e52-6af837cb76b9" name="validate customer registration data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


//assert success holder in response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert customer data.

assert(json.response.customers.customer.user_id.size() == 1);

String user_id = json.response.customers.customer.user_id[0];
String f_name = json.response.customers.customer.firstname[0];
String l_name = json.response.customers.customer.lastname[0];
String mobile = json.response.customers.customer.mobile[0];
String email = json.response.customers.customer.email[0];
String lifetime_points = json.response.customers.customer.lifetime_points[0];
String loyalty_points = json.response.customers.customer.loyalty_points[0];
String current_slab = json.response.customers.customer.current_slab[0];

String lifetime_purchases = json.response.customers.customer.lifetime_purchases[0];
String type = json.response.customers.customer.type[0];
String source = json.response.customers.customer.source[0];
String mobile_reg = context.expand('${#TestCase#mobile1}');







assert(lifetime_purchases == "0") // as this is new customer with no transactions.
assert(mobile == mobile_reg)
assert(json.response.customers.customer.subscriptions[0].subscription.size() == 4) // as we have configured 4 subscription while adding a customer.
assert(f_name == "fname_" + mobile_reg);
assert(l_name == "lname_" + mobile_reg);
assert(email == mobile_reg + "@gmail.com");
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.testSuite.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.setPropertyValue("lifetime_points",lifetime_points.toString());
messageExchange.modelItem.testCase.setPropertyValue("loyalty_points",loyalty_points.toString());





//item status.

assert(json.response.customers.customer.item_status[0].success == "true")
assert(json.response.customers.customer.item_status[0].code == "1000")
if(json.response.customers.customer.item_status[0].message.toLowerCase().contains("customer registration successful")){
	assert true;
}
else{
	assert false : "customer registration not done! " + json.response.customers.customer.item_status[0].message
}
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get another unique mobile number to register a second customer" id="b5334426-d538-421c-98fa-52831b4f4885"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
String mobile = timestamp.substring(3);
testRunner.testCase.setPropertyValue("mobile2","91" + mobile);</script></con:config></con:testStep><con:testStep type="restrequest" name="register another new customer" id="771d83c0-5e81-435d-8e30-b3b9596c0d86"><con:settings/><con:config service="customer_add" resourcePath="/{version}/customer/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="register another new customer" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "${#TestCase#mobile2}",
        "email": "${#TestCase#mobile2}@gmail.com",

        "firstname": "fname_${#TestCase#mobile2}",
        "lastname": "lname_${#TestCase#mobile2}",
        "gender": "F",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "560068"
					}
				]
			},
        "custom_fields": {
          "field": [
            {
              "name": "Hobbies",
              "value": "[“Dance”]"
            }
          ]
        }

      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6561825e-a822-4b5a-8d71-764b779e304e" name="Status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5b1e5a91-9733-4e79-a8df-37a1c6ca91ff" name="capture request id"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id_2",req_id);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358bd7c4-10af-4b97-9e52-6af837cb76b9" name="validate customer registration data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


//assert success holder in response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert customer data.

assert(json.response.customers.customer.user_id.size() == 1);

String user_id = json.response.customers.customer.user_id[0];
String f_name = json.response.customers.customer.firstname[0];
String l_name = json.response.customers.customer.lastname[0];
String mobile = json.response.customers.customer.mobile[0];
String email = json.response.customers.customer.email[0];
String lifetime_points = json.response.customers.customer.lifetime_points[0];
String loyalty_points = json.response.customers.customer.loyalty_points[0];
String current_slab = json.response.customers.customer.current_slab[0];

String lifetime_purchases = json.response.customers.customer.lifetime_purchases[0];
String type = json.response.customers.customer.type[0];
String source = json.response.customers.customer.source[0];
String mobile_reg = context.expand('${#TestCase#mobile2}');







assert(lifetime_purchases == "0") // as this is new customer with no transactions.
assert(mobile == mobile_reg)
assert(json.response.customers.customer.subscriptions[0].subscription.size() == 4) // as we have configured 4 subscription while adding a customer.
assert(f_name == "fname_" + mobile_reg);
assert(l_name == "lname_" + mobile_reg);
assert(email == mobile_reg + "@gmail.com");
messageExchange.modelItem.testCase.setPropertyValue("user_id_2",user_id);
messageExchange.modelItem.testCase.setPropertyValue("lifetime_points_2",lifetime_points.toString());
messageExchange.modelItem.testCase.setPropertyValue("loyalty_points_2",loyalty_points.toString());





//item status.

assert(json.response.customers.customer.item_status[0].success == "true")
assert(json.response.customers.customer.item_status[0].code == "1000")
if(json.response.customers.customer.item_status[0].message.toLowerCase().contains("customer registration successful")){
	assert true;
}
else{
	assert false : "customer registration not done! " + json.response.customers.customer.item_status[0].message
}
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="check if points are transferable" id="2ed5ab96-58ae-4bff-9be1-7933c636e20b"><con:settings/><con:config service="isPointsTransferable" resourcePath="/v2/points/isTransferrable" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="check if points are transferable" id="0dcc0e21-afd7-4862-838c-ca8bcaeadc75" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
    "issueOtp": false,
    "pointsTobeTransferred": 2,
    "toCustomerIdentifier": {
        "type": "MOBILE",
        "value": "${#TestCase#mobile1}"
    },
    "fromCustomerIdentifier": {
        "type": "MOBILE",
        "value": "${#TestCase#mobile2}"
    }
}</con:request><con:originalUri>https://nightly.capillary.in/v2/points/isTransferrable</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d1ff46d4-48a9-4afd-a194-a61c1bb13eae" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="22cb04cf-382b-4a2b-aa1c-0d6abd9d041b" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

//assert isTransferrable status and points details
assert(json.data[0].pointsTobeTransferred == 2) //2 is passed in api input.
assert(json.data[0].transferrable == true)



//assert transfer from details.
String userIDTransferFrom = json.data[0].transferFrom.id.toString()
String firstNameTransferFrom = json.data[0].transferFrom.profiles[0].firstName
String lastNameTransferFrom = json.data[0].transferFrom.profiles[0].lastName
String userIdProfileTransferFrom = json.data[0].transferFrom.profiles[0].userId.toString()
String loyaltyTypeTranferFrom = json.data[0].transferFrom.loyaltyInfo.loyaltyType
int lifetimePurchasesTransferFrom = json.data[0].transferFrom.loyaltyInfo.lifetimePurchases
assert(userIDTransferFrom == context.expand('${#TestCase#user_id_2}'))
assert(firstNameTransferFrom  == "fname_" + context.expand('${#TestCase#mobile2}'))
assert(lastNameTransferFrom == "lname_" + context.expand('${#TestCase#mobile2}'))
assert(userIdProfileTransferFrom == context.expand('${#TestCase#user_id_2}'))
assert(loyaltyTypeTranferFrom == "loyalty")
assert(lifetimePurchasesTransferFrom == 0) //as this is a new customer.

//assert transfer to details.

String loyaltyTypeTransferTo = json.data[0].transferTo.loyaltyInfo.loyaltyType
String userIdTransferTo = json.data[0].transferTo.id.toString()
String userIDProfileTransferTo = json.data[0].transferTo.profiles[0].userId.toString()
String firstNameTransferTo = json.data[0].transferTo.profiles[0].firstName
String lastNameTransferTo = json.data[0].transferTo.profiles[0].lastName
int lifetimePurchasesTransferTo = json.data[0].transferTo.loyaltyInfo.lifetimePurchases

assert(userIdTransferTo == context.expand('${#TestCase#user_id}'))
assert(firstNameTransferTo == "fname_" + context.expand('${#TestCase#mobile1}'))
assert(lastNameTransferTo == "lname_" + context.expand('${#TestCase#mobile1}'))
assert(userIDProfileTransferTo == context.expand('${#TestCase#user_id}'))
assert(loyaltyTypeTransferTo == "loyalty")
assert(lifetimePurchasesTransferTo == 0) //as this is a new customer.
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="now do the points transfer" id="a16947b2-d8cc-4b4e-a6a0-64a1d95e3985"><con:settings/><con:config service="PointsTransfer" resourcePath="/v2/points/transfer" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="now do the points transfer" id="66016c4b-99ca-4eff-8f1e-3c10187c0c22" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "pointsTobeTransferred": 2,
  "fromCustomerIdentifier": {
    "type": "MOBILE",
    "value": "${#TestCase#mobile2}"
  },
  "toCustomerIdentifier": {
    "type": "MOBILE",
    "value": "${#TestCase#mobile1}"
  },
  "notes": "doing transfer of 2 points",
  "code": ""
}</con:request><con:originalUri>https://nightly.capillary.in/v2/points/transfer</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="538c7310-6a05-4f96-a32c-d5671fa91665" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7481490-c1d2-4179-bb37-eabb63cadd2f" name="assert point transfer data contents"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def pointsTransferred = json.data.pointsTransferred[0]
String transferType = json.data.transferType[0]
String transferId = json.data.transferId[0]

int transferFromUserId = json.data.transferredFrom[0].userId
int transferToUserId = json.data.transferredTo[0].userId


int transferFromActual = Integer.parseInt(context.expand('${#TestCase#user_id_2}'))
int transferToActual = Integer.parseInt(context.expand('${#TestCase#user_id}'))

assert(transferFromUserId == transferFromActual)
assert(transferToUserId == transferToActual)


assert(transferType == "DEDUCTION")
assert(pointsTransferred == 2) // as 2 points are tranferred as input.

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="afaa8a9d-61b5-4681-8838-ac6362171b72" name="capture request id"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id",req_id);</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="validate the event log in mongo via an API" id="d2fa0509-06c1-4356-a922-8bd1c254a9b5" disabled="true"><con:settings/><con:config service="getEventLogs" resourcePath="/{version}/webHooks/eventLog/requestId/{request_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="validate the event log in mongo via an API" id="c3c5f177-ed07-4079-aa2d-e3b654c037ab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic Y20uMToyMDJjYjk2MmFjNTkwNzViOTY0YjA3MTUyZDIzNGI3MA==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a67073e-d145-4c5f-90bf-7b2955e84d93" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac07e8a1-01a4-49a8-9e5d-6e28d324525f" name="validate the events pushed status"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def consumers = json.data.consumerGroupId;
int index = 0;
String my_consumer = context.expand('${#TestCase#webhook_consumerID}');
ArrayList&lt;String> eventNames = new ArrayList();
ArrayList&lt;Integer> consumersStatus = new ArrayList();
for(consumer in consumers){
	if(consumer == my_consumer){
		String event_name = json.data.eventName[index];
		def consumerResponse = json.data.consumerResponse[index]
		assert(consumerResponse != null) : "Consumer response is NULL"
		int status = json.data.consumerResponse[index].webhookHttpStatus;
		eventNames.add(event_name);
		consumersStatus.add(status);
	}
	index++;
}

log.info eventNames

messageExchange.modelItem.testCase.setPropertyValue("events",eventNames.inspect())
messageExchange.modelItem.testCase.setPropertyValue("eventStatus",consumersStatus.inspect())

//all status should be 200
for(String status : consumersStatus){
	assert status == "200"
}
//transactionAdded event should be pushed, as that is triggered as part of test case.
assert('transactionAdded' in eventNames)





</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="version" value="v3"/>
  <con:entry key="request_id" value="${#TestCase#request_id}"/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>request_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}</con:setupScript><con:properties><con:property><con:name>mobile1</con:name><con:value>919783596903</con:value></con:property><con:property><con:name>request_id</con:name><con:value>bb1fed90-4105-41c4-a287-1c150c4f5f75</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378988268</con:value></con:property><con:property><con:name>lifetime_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyalty_points</con:name><con:value>180</con:value></con:property><con:property><con:name>mobile2</con:name><con:value>919783598978</con:value></con:property><con:property><con:name>request_id_2</con:name><con:value>88eca714-0b2b-4166-9a70-3cc8d56db621</con:value></con:property><con:property><con:name>user_id_2</con:name><con:value>378988269</con:value></con:property><con:property><con:name>lifetime_points_2</con:name><con:value>180</con:value></con:property><con:property><con:name>loyalty_points_2</con:name><con:value>180</con:value></con:property><con:property><con:name>events</con:name><con:value>[]</con:value></con:property><con:property><con:name>eventStatus</con:name><con:value>[]</con:value></con:property></con:properties></con:testCase><con:testCase id="a6d8f7bc-5a9b-45a5-8360-9c9b21ffa345" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Event_CustomerUpdate" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get unique phone number and email to register" id="4206d3e0-e4dd-4c0f-a772-e1292a59407a"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
String mobile = timestamp.substring(3);
testRunner.testCase.setPropertyValue("mobile",mobile);</script></con:config></con:testStep><con:testStep type="restrequest" name="register a new customer" id="b58438f9-e00c-4e8f-8a9b-bcf0ef2ffffb"><con:settings/><con:config service="customer_add" resourcePath="/{version}/customer/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="register a new customer" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "${#TestCase#mobile}",
        "email": "${#TestCase#mobile}@gmail.com",

        "firstname": "fname_${#TestCase#mobile}",
        "lastname": "lname_${#TestCase#mobile}",
        "gender": "F",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "122001"
					}
				]
			},
        "custom_fields": {
          "field": [
            {
              "name": "Hobbies",
              "value": "[“Fitness”]"
            }
          ]
        }

      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6561825e-a822-4b5a-8d71-764b779e304e" name="Status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5b1e5a91-9733-4e79-a8df-37a1c6ca91ff" name="capture request id"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id",req_id);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358bd7c4-10af-4b97-9e52-6af837cb76b9" name="validate customer registration data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


//assert success holder in response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert customer data.

assert(json.response.customers.customer.user_id.size() == 1);

String user_id = json.response.customers.customer.user_id[0];
String f_name = json.response.customers.customer.firstname[0];
String l_name = json.response.customers.customer.lastname[0];
String mobile = json.response.customers.customer.mobile[0];
String email = json.response.customers.customer.email[0];
String lifetime_points = json.response.customers.customer.lifetime_points[0];
String loyalty_points = json.response.customers.customer.loyalty_points[0];
String current_slab = json.response.customers.customer.current_slab[0];

String lifetime_purchases = json.response.customers.customer.lifetime_purchases[0];
String type = json.response.customers.customer.type[0];
String source = json.response.customers.customer.source[0];
String mobile_reg = context.expand('${#TestCase#mobile}');







assert(lifetime_purchases == "0") // as this is new customer with no transactions.
assert(mobile == mobile_reg)
assert(json.response.customers.customer.subscriptions[0].subscription.size() == 4) // as we have configured 4 subscription while adding a customer.
assert(f_name == "fname_" + mobile_reg);
assert(l_name == "lname_" + mobile_reg);
assert(email == mobile_reg + "@gmail.com");
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.setPropertyValue("lifetime_points",lifetime_points.toString());
messageExchange.modelItem.testCase.setPropertyValue("loyalty_points",loyalty_points.toString());





//item status.

assert(json.response.customers.customer.item_status[0].success == "true")
assert(json.response.customers.customer.item_status[0].code == "1000")
if(json.response.customers.customer.item_status[0].message.toLowerCase().contains("customer registration successful")){
	assert true;
}
else{
	assert false : "customer registration not done! " + json.response.customers.customer.item_status[0].message
}
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="update an existing customer details" id="2f7352f0-b6d1-4056-847a-80c87b87329f"><con:settings/><con:config service="customer_add" resourcePath="/{version}/customer/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="update an existing customer details" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "${#TestCase#mobile}",
        "email": "${#TestCase#mobile}@gmail.com",

        "firstname": "fname_${#TestCase#mobile}_changed",
        "lastname": "lname_${#TestCase#mobile}_changed",
        "gender": "F",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "122001"
					}
				]
			}
      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6561825e-a822-4b5a-8d71-764b779e304e" name="Status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5b1e5a91-9733-4e79-a8df-37a1c6ca91ff" name="capture request id"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id",req_id);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358bd7c4-10af-4b97-9e52-6af837cb76b9" name="validate customer updation data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


//assert success holder in response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert customer data.

assert(json.response.customers.customer.user_id.size() == 1);

String user_id = json.response.customers.customer.user_id[0];
String f_name = json.response.customers.customer.firstname[0];
String l_name = json.response.customers.customer.lastname[0];
String mobile = json.response.customers.customer.mobile[0];
String email = json.response.customers.customer.email[0];
String lifetime_points = json.response.customers.customer.lifetime_points[0];
String loyalty_points = json.response.customers.customer.loyalty_points[0];
String current_slab = json.response.customers.customer.current_slab[0];

String lifetime_purchases = json.response.customers.customer.lifetime_purchases[0];
String type = json.response.customers.customer.type[0];
String source = json.response.customers.customer.source[0];
String mobile_reg = context.expand('${#TestCase#mobile}');







assert(lifetime_purchases == "0") // as this is new customer with no transactions.
assert(mobile == mobile_reg)
assert(json.response.customers.customer.subscriptions[0].subscription.size() == 4) // as we have configured 4 subscription while adding a customer.
assert(f_name == "fname_" + mobile_reg + "_changed");
assert(l_name == "lname_" + mobile_reg + "_changed");
assert(email == mobile_reg + "@gmail.com");
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.setPropertyValue("lifetime_points",lifetime_points.toString());
messageExchange.modelItem.testCase.setPropertyValue("loyalty_points",loyalty_points.toString());





//item status.

String successFlag = json.response.customers.customer.item_status[0].success
String code = json.response.customers.customer.item_status[0].code
String message = json.response.customers.customer.item_status[0].message

assert(successFlag == "true")
assert(code == "1000")
assert(message == "Customer successfully updated")
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}</con:setupScript><con:properties><con:property><con:name>mobile</con:name><con:value>9783733240</con:value></con:property><con:property><con:name>request_id</con:name><con:value>291c6c4b-5dce-4a4d-a455-4e1131044124</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378988271</con:value></con:property><con:property><con:name>lifetime_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyalty_points</con:name><con:value>180</con:value></con:property></con:properties></con:testCase><con:testCase id="b0d35e61-7947-4104-8d93-35451922592d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Event_ReturnTransaction" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get a unique tnx number to make a new transaction" id="962a71b7-7db4-4cfb-8951-fa9747f26cf0"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
testRunner.testCase.setPropertyValue("tnx_number",timestamp);</script></con:config></con:testStep><con:testStep type="groovy" name="get a unique mobile" id="7e9e4271-2a40-4c91-ab83-1e6a3b3db08a"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
String mobile = timestamp.substring(3);
testRunner.testCase.setPropertyValue("mobile","91" + mobile);</script></con:config></con:testStep><con:testStep type="restrequest" name="Register a new customer" id="46825900-9329-4ab1-8da5-58db0d9a9311"><con:settings/><con:config service="customer_add" resourcePath="/{version}/customer/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register a new customer" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "${#TestCase#mobile}",
        "email": "${#TestCase#mobile}@gmail.com",

        "firstname": "fname_${#TestCase#mobile}",
        "lastname": "lname_${#TestCase#mobile}",
        "gender": "M",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "122001"
					}
				]
			},
        "custom_fields": {
          "field": [
            {
              "name": "Hobbies",
              "value": "[“Fitness”]"
            }
          ]
        }

      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6561825e-a822-4b5a-8d71-764b779e304e" name="Status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5b1e5a91-9733-4e79-a8df-37a1c6ca91ff" name="capture request id"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id",req_id);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358bd7c4-10af-4b97-9e52-6af837cb76b9" name="validate customer registration data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


//assert success holder in response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert customer data.

assert(json.response.customers.customer.user_id.size() == 1);

String user_id = json.response.customers.customer.user_id[0];
String f_name = json.response.customers.customer.firstname[0];
String l_name = json.response.customers.customer.lastname[0];
String mobile = json.response.customers.customer.mobile[0];
String email = json.response.customers.customer.email[0];
String lifetime_points = json.response.customers.customer.lifetime_points[0];
String loyalty_points = json.response.customers.customer.loyalty_points[0];
String current_slab = json.response.customers.customer.current_slab[0];

String lifetime_purchases = json.response.customers.customer.lifetime_purchases[0];
String type = json.response.customers.customer.type[0];
String source = json.response.customers.customer.source[0];
String mobile_reg = context.expand('${#TestCase#mobile}');







assert(lifetime_purchases == "0") // as this is new customer with no transactions.
assert(mobile == mobile_reg)
assert(json.response.customers.customer.subscriptions[0].subscription.size() == 4) // as we have configured 4 subscription while adding a customer.
assert(f_name == "fname_" + mobile_reg);
assert(l_name == "lname_" + mobile_reg);
assert(email == mobile_reg + "@gmail.com");
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.testSuite.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.setPropertyValue("lifetime_points",lifetime_points.toString());
messageExchange.modelItem.testCase.setPropertyValue("loyalty_points",loyalty_points.toString());





//item status.

assert(json.response.customers.customer.item_status[0].success == "true")
assert(json.response.customers.customer.item_status[0].code == "1000")
if(json.response.customers.customer.item_status[0].message.toLowerCase().contains("customer registration successful")){
	assert true;
}
else{
	assert false : "customer registration not done! " + json.response.customers.customer.item_status[0].message
}
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="add a regular transaction" id="7ecf068b-358f-42f1-ae2c-6d3dc8cd7c65"><con:settings/><con:config service="addRegularTransaction" resourcePath="/v1.1/transaction/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="add a regular transaction" id="30d7b033-bada-4cf6-abdf-781b858869dc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
	"root": {
		"transaction": {
			"bill_client_id": "${#TestCase#mobile}",
			"type": "regular",
			"number": "${#TestCase#tnx_number}",
			"notes": "2 lin1e items",
			"amount" : 2000,
			"customer": {
				"mobile": "${#TestCase#mobile}",
				"email": "${#TestCase#mobile}@gmail.com",
				"external_id": "x${#TestCase#mobile}",
				"firstname": "fname_${#TestCase#mobile}",
				"lastname": "lname_${#TestCase#mobile}"
			},
			"extended_fields": {
				"field": [{
						"name": "ship_first_name",
						"value": "fname_${#TestCase#mobile}"
					},
					{
						"name": "ship_last_name",
						"value": "lname_${#TestCase#mobile}"
					}
				]
			},
			"custom_fields": {

				"field": [{
						"name": "bankdetails",
						"value": "SBI"
					},
					{
						"name": "bankdetails",
						"value": "SBI"
					}
				]

			},
			"line_items": {
				"line_item": [{
						"extended_fields": {
							"field": [{
									"name": "MetalRate",
									"value": 23
								},
								{
									"name": "service_tax_amount",
									"value": 100
								}
							]
						},
						"serial": "1",
						"amount": "500",
						"description": "soap",
						"item_code": "item-001",
						"qty": "50",
						"rate": "10",
						"value": "500",
						"attributes": {
							"attribute": {
								"name": "brand",
								"value": "Levis"
							}
						}
					},
					{
						"extended_fields": {
							"field": [{
									"name": "DesignCode",
									"value": "jmh6677"
								},
								{
									"name": "SupplierCode",
									"value": "hgjy111"
								}
							]
						},
						"serial": "2",
						"amount": "500",
						"description": "soap",
						"item_code": "item-001",
						"qty": "50",
						"rate": "10",
						"value": "500",
						"transaction_number": "niBill1",
						"attributes": {
							"attribute": {
								"name": "brand",
								"value": "Levis"
							}
						}
					},
					{
						"extended_fields": {
							"field": [{
									"name": "StoneCharge",
									"value": 22
								},
								{
									"name": "MakingCharge",
									"value": 11
								}
							]
						},
						"serial": "3",
						"item_code": "t122",
						"description": "afvdfvd",
						"qty": "3",
						"rate": "1000",
						"value": "3000",
						"discount_value": "100",
						"amount": "2900",
						"cashier_id": "cash1233",
						"transaction_number": "previousBill1"
					}
				]
			},
			"associate_details": {
				"code": "hiraxdhara",
				"name": "Tom Sawyer"
			}
		}
	}
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/transaction/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1e361c9e-3bde-431e-a3ca-af4c4199f182" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7e1f7598-72ef-4e4d-bf6c-c718fff7750c" name="capture request ID"><con:configuration><scriptText>String req_id = messageExchange.responseHeaders["X-CAP-REQUEST-ID"][0].toString();
messageExchange.modelItem.testCase.setPropertyValue("request_id",req_id);</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7fac582-133e-4ed0-8c17-d64cda91eb65" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


String mob = context.expand('${#TestCase#mobile}')
String tnxNumber = context.expand('${#TestCase#tnx_number}')
String cumulativePurchases = context.expand('${#TestCase#cumulativePurchases}');
//asserting status of response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")

// Get customer point info before the tnx.

String loyaltyPoints_beforetnx = context.expand('${#TestCase#loyaltyPoints}')


//get transaction details
String tnxID = json.response.transactions.transaction.id[0].toString();
String billNumber = json.response.transactions.transaction.number[0].toString();
String type = json.response.transactions.transaction.type[0].toString();

assert(billNumber == tnxNumber);
messageExchange.modelItem.testCase.setPropertyValue("tnxID",tnxID);


//get customer details.

String user_id = json.response.transactions.transaction.customer[0].user_id.toString();
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id)
String mobile = json.response.transactions.transaction.customer[0].mobile.toString();
assert(mobile == mob);
String fname = json.response.transactions.transaction.customer[0].firstname.toString();
assert(fname == "fname_" + mob);
String lname = json.response.transactions.transaction.customer[0].lastname.toString();
assert(lname == "lname_" + mob);
String email = json.response.transactions.transaction.customer[0].email.toString();
assert(email == mob + "@gmail.com")
String externalID = json.response.transactions.transaction.customer[0].external_id.toString();
assert(externalID == "x" + mob);
String lifetimePoints = json.response.transactions.transaction.customer[0].lifetime_points.toString();
messageExchange.modelItem.testCase.setPropertyValue("lifetimePoints_afterTnx",lifetimePoints);
String loyaltyPoints = json.response.transactions.transaction.customer[0].loyalty_points.toString();
messageExchange.modelItem.testCase.setPropertyValue("loyaltyPoints_afterTnx",loyaltyPoints);
String currentSlab = json.response.transactions.transaction.customer[0].current_slab.toString();
messageExchange.modelItem.testCase.setPropertyValue("currentSlab_afterTnx",currentSlab);
String lifetime_purchases = json.response.transactions.transaction.customer[0].lifetime_purchases.toString();
messageExchange.modelItem.testCase.setPropertyValue("lifetime_puchases_afterTnx",lifetime_purchases);



String user_type = json.response.transactions.transaction.customer[0].type.toString();

String source = json.response.transactions.transaction.customer[0].source.toString();

//get side effects of transactions done.
String awarded_points = json.response.transactions.transaction.side_effects[0].effect.awarded_points[0].toString();

String totalPoints = json.response.transactions.transaction.side_effects[0].effect.total_points[0].toString();
String pointBalance = json.response.transactions.transaction.points_balance[0].toString();

messageExchange.modelItem.testCase.setPropertyValue("awarded_points_afterTnx",awarded_points);


messageExchange.modelItem.testCase.setPropertyValue("totalPoints_afterTnx",totalPoints);


//Item status.
assert(json.response.transactions.transaction.item_status[0].success == "true")
assert(json.response.transactions.transaction.item_status[0].code == 600)
String msg = json.response.transactions.transaction.item_status[0].message;
assert(msg == "Transaction added successfully")
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="now return the full transaction" id="d8b9af38-1428-48aa-bf43-743fe317a05b"><con:settings/><con:config service="returnRegularTransaction" resourcePath="/v1.1/transaction/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="now return the full transaction" id="77cded7f-7736-4732-bd83-29e42c30f628" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
	"root": {
		"transaction": {
			"bill_client_id": "${#TestCase#mobile}",
			"type": "return",
			"number": "${#TestCase#tnx_number}",
			"notes": "2 lin1e items",
			"amount" : 2000,
			"customer": {
				"mobile": "${#TestCase#mobile}",
				"email": "${#TestCase#mobile}@gmail.com",
				"external_id": "x${#TestCase#mobile}",
				"firstname": "fname_${#TestCase#mobile}",
				"lastname": "lname_${#TestCase#mobile}"
			},
			"extended_fields": {
				"field": [{
						"name": "ship_first_name",
						"value": "fname_${#TestCase#mobile}"
					},
					{
						"name": "ship_last_name",
						"value": "lname_${#TestCase#mobile}"
					}
				]
			},
			"custom_fields": {

				"field": [{
						"name": "bankdetails",
						"value": "SBI"
					},
					{
						"name": "bankdetails",
						"value": "SBI"
					}
				]

			},
			"line_items": {
				"line_item": [{
						"extended_fields": {
							"field": [{
									"name": "MetalRate",
									"value": 23
								},
								{
									"name": "service_tax_amount",
									"value": 100
								}
							]
						},
						"serial": "1",
						"amount": "500",
						"description": "soap",
						"item_code": "item-001",
						"qty": "50",
						"rate": "10",
						"value": "500",
						"attributes": {
							"attribute": {
								"name": "brand",
								"value": "Levis"
							}
						}
					},
					{
						"extended_fields": {
							"field": [{
									"name": "DesignCode",
									"value": "jmh6677"
								},
								{
									"name": "SupplierCode",
									"value": "hgjy111"
								}
							]
						},
						"serial": "2",
						"amount": "500",
						"description": "soap",
						"item_code": "item-001",
						"qty": "50",
						"rate": "10",
						"value": "500",
						"transaction_number": "niBill1",
						"attributes": {
							"attribute": {
								"name": "brand",
								"value": "Levis"
							}
						}
					},
					{
						"extended_fields": {
							"field": [{
									"name": "StoneCharge",
									"value": 22
								},
								{
									"name": "MakingCharge",
									"value": 11
								}
							]
						},
						"serial": "3",
						"item_code": "t122",
						"description": "afvdfvd",
						"qty": "3",
						"rate": "1000",
						"value": "3000",
						"discount_value": "100",
						"amount": "2900",
						"cashier_id": "cash1233",
						"type": "return",
						"return_type": "LINE_ITEM",
						"transaction_number": "previousBill1"
					}
				]
			},
      "associate_details": {
				"code": "hiraxdhara",
				"name": "Tom Sawyer"
			},
      "return_type": "FULL"
      }
	}
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/transaction/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="49b7a4cb-cbdf-4424-85d9-8d883e854d62" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3be505cd-9acf-4e10-aed0-661a4c3b6346" name="Validate return transaction contents"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

//asserting status of response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")

//assert return transaction details

String ID = json.response.transactions.transaction[0].id
String transactionNumber = json.response.transactions.transaction[0].number
String billClientID = json.response.transactions.transaction[0].bill_client_id
String type = json.response.transactions.transaction[0].type
String dileveryStatus = json.response.transactions.transaction[0].delivery_status
int pointsDeducted = json.response.transactions.transaction[0].points_deducted
int points_balance = json.response.transactions.transaction[0].points_balance

assert(transactionNumber == context.expand('${#TestCase#tnx_number}'))
assert(billClientID == context.expand('${#TestCase#mobile}'))
assert(type == "RETURN")
assert(dileveryStatus == "DELIVERED")
assert(pointsDeducted.toString() == context.expand('${#TestCase#awarded_points_afterTnx}'))






//assert customer information
String userID = json.response.transactions.transaction[0].customer.user_id
String mobile = json.response.transactions.transaction[0].customer.mobile
String firstName = json.response.transactions.transaction[0].customer.firstname
String lastName = json.response.transactions.transaction[0].customer.lastname
String email = json.response.transactions.transaction[0].customer.email
String externalID = json.response.transactions.transaction[0].customer.external_id
String lifetimePoints = json.response.transactions.transaction[0].customer.lifetime_points
String loyaltyPoints = json.response.transactions.transaction[0].customer.loyalty_points
String lifetimePurchases = json.response.transactions.transaction[0].customer.lifetime_purchases
String userType = json.response.transactions.transaction[0].customer.type
String source = json.response.transactions.transaction[0].customer.source


//assert side effects
String awardedPoints = json.response.transactions.transaction[0].side_effects.effect[0].awarded_points
String totalPoints = json.response.transactions.transaction[0].side_effects.effect[0].total_points
String sideEffectType = json.response.transactions.transaction[0].side_effects.effect[0].type

String awarededPointsAfterTnx = context.expand('${#TestCase#awarded_points_afterTnx}');
String lifetimePointsAfterTnx = context.expand('${#TestCase#lifetime_points}')
assert(awardedPoints == "-" + awarededPointsAfterTnx) // as we have returned full transaction.
assert(totalPoints == lifetimePointsAfterTnx)


//assert item status

assert(json.response.transactions.transaction[0].item_status.success == "true")
assert(json.response.transactions.transaction[0].item_status.message == "Transaction added successfully")








</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}</con:setupScript><con:properties><con:property><con:name>tnx_number</con:name><con:value>1589785605165</con:value></con:property><con:property><con:name>request_id</con:name><con:value>5c8ecd69-368c-477d-b644-15d586b18382</con:value></con:property><con:property><con:name>tnxID</con:name><con:value>38249228</con:value></con:property><con:property><con:name>mobile</con:name><con:value>919785605166</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378988529</con:value></con:property><con:property><con:name>lifetimePoints_afterTnx</con:name><con:value>620</con:value></con:property><con:property><con:name>loyaltyPoints_afterTnx</con:name><con:value>620</con:value></con:property><con:property><con:name>currentSlab_afterTnx</con:name><con:value>Silver</con:value></con:property><con:property><con:name>lifetime_puchases_afterTnx</con:name><con:value>2000</con:value></con:property><con:property><con:name>awarded_points_afterTnx</con:name><con:value>440</con:value></con:property><con:property><con:name>totalPoints_afterTnx</con:name><con:value>620</con:value></con:property><con:property><con:name>lifetime_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyalty_points</con:name><con:value>180</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>mobile</con:name><con:value>919792644247</con:value></con:property><con:property><con:name>webhook_consumerID</con:name><con:value/></con:property><con:property><con:name>user_id</con:name><con:value>378989600</con:value></con:property></con:properties></con:testSuite><con:testSuite id="38583330-b416-4a11-a304-90fa8d14eb9b" name="Point Redemption"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="09dd370e-3ef6-4e5f-b954-65609ca078e7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Full_Point_Redemption" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get current date and time" id="b7e5507d-cc2c-4f11-bdc4-6bf6906b40dc"><con:settings/><con:config><script>def getcurrent = Calendar.getInstance()
String current_time = getcurrent.format("yyyy-MM-dd HH:mm:ss");
testRunner.testCase.testSuite.setPropertyValue("current_time",current_time);</script></con:config></con:testStep><con:testStep type="calltestcase" name="add a transaction" id="21bd6f70-3c8d-45d4-9fdf-cece1f441a81"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a6919450-66f2-417f-9891-60d4219922a2</con:targetTestCase><con:properties><con:property><con:name>tnx_number</con:name><con:value>1589782308382</con:value></con:property><con:property><con:name>tnxID</con:name><con:value>38249200</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378987737</con:value></con:property><con:property><con:name>mobile</con:name><con:value>8768044354</con:value></con:property><con:property><con:name>awarded_points_afterTnx</con:name><con:value>500</con:value></con:property><con:property><con:name>totalPoints_afterTnx</con:name><con:value>500</con:value></con:property><con:property><con:name>pointBalance_afterTnx</con:name><con:value>null</con:value></con:property><con:property><con:name>tnx_mobile</con:name><con:value>919782308386</con:value></con:property></con:properties><con:returnProperties><con:entry>tnx_number</con:entry><con:entry>tnxID</con:entry><con:entry>user_id</con:entry><con:entry>awarded_points_afterTnx</con:entry><con:entry>totalPoints_afterTnx</con:entry><con:entry>pointBalance_afterTnx</con:entry><con:entry>tnx_mobile</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="redeem full points awarded in transaction" id="1d17908d-5c78-4dd8-8486-7f8965c4beed"><con:settings/><con:config service="RedeemPoints" resourcePath="/{version}/points/redeem" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="redeem full points awarded in transaction" id="589bdef3-8de7-4a35-bc91-bdb079b2b19f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "redeem": {
      "points_redeemed": "${#awarded_points_afterTnx}",
      "customer":
				{
					"mobile": "${#tnx_mobile}"
				},
      "group_redemption": "false",
      "notes": "redeem",
      "redemption_time": "${#TestSuite#current_time}"
    }
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/points/redeem</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e9f80710-bb53-4e19-949f-3b9a696ce7fd" name="status - 200 "><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5f939d79-0c31-4ced-8f50-0ff758599ccd" name="Validate the points redeemed response"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

//assert status
String successFlag = json.response.status.success
int code = json.response.status.code
String message = json.response.status.message

assert(successFlag == "true")
assert(code == 200)
assert(message == "Success")

//get the customer and transaction details from transaction add and point redeem api response
String pointsToBeRedeem =  context.expand('${#awarded_points_afterTnx}')
String tnx_user_id = context.expand('${#user_id}')
String mob = context.expand('${#tnx_mobile}')
String user_id = json.response.responses.points.user_id.toString();
String mobile = json.response.responses.points.mobile.toString();
String num_points = json.response.responses.points.side_effects.effect[0].num_points.toString();
String currency_value = json.response.responses.points.side_effects.effect[0].currency_value.toString();
String redemption_id = json.response.responses.points.redemption_id.toString();
String redeemed_value = json.response.responses.points.redeemed_value.toString();


//Vaidating the actual and expected value from the response
assert(pointsToBeRedeem == redeemed_value)
assert(user_id == tnx_user_id)
assert(mobile == mob);
assert(num_points == pointsToBeRedeem)
assert(currency_value == pointsToBeRedeem)

//Exposing the redemption id for other api use
messageExchange.modelItem.testCase.setPropertyValue("redemption_id",redemption_id);
messageExchange.modelItem.testCase.setPropertyValue("redemption_mobile",mobile);


assert(json.response.responses.points.item_status.success == "true")
assert(json.response.responses.points.item_status.code == 800)
String msg = json.response.responses.points.item_status.message;
if(msg.toLowerCase() == "points redeemed"){
	assert true;
}
else{
	assert false : "Getting message as - " + msg;
}</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="program_id" value=""/>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters><con:parameterOrder><con:entry>format</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="a3555cc3-db20-4364-b51d-daad5ccc5ed3" disabled="true"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>com.mysql.jdbc.Driver</con:driver><con:connectionString>jdbc:mysql://127.0.0.1:8921/warehouse?user=capillaryro&amp;password=captech123</con:connectionString><con:query>Select * from warehouse.points_awarded where org_id = 50613 and program_id = 1400 and customer_id =378950979</con:query><con:properties/></con:config></con:testStep><con:properties><con:property><con:name>redemption_id</con:name><con:value>qsS6eQ</con:value></con:property><con:property><con:name>redemption_mobile</con:name><con:value>919782308386</con:value></con:property></con:properties></con:testCase><con:testCase id="ff854ded-40a5-4d28-95be-c0654510fd29" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Partial_Point_Redemprion" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get current date and time" id="a44585c7-5822-479f-b75a-b939035bc9b2"><con:settings/><con:config><script>def getcurrent = Calendar.getInstance()
String current_time = getcurrent.format("yyyy-MM-dd HH:mm:ss");
testRunner.testCase.testSuite.setPropertyValue("current_time",current_time);</script></con:config></con:testStep><con:testStep type="calltestcase" name="add a transaction" id="1814b005-910e-4fc3-bf00-9ce004862956"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a6919450-66f2-417f-9891-60d4219922a2</con:targetTestCase><con:properties><con:property><con:name>tnx_number</con:name><con:value>1589782613534</con:value></con:property><con:property><con:name>tnxID</con:name><con:value>38249201</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378987738</con:value></con:property><con:property><con:name>mobile</con:name><con:value>9782613536</con:value></con:property><con:property><con:name>awarded_points_afterTnx</con:name><con:value>500</con:value></con:property><con:property><con:name>totalPoints_afterTnx</con:name><con:value>500</con:value></con:property><con:property><con:name>pointBalance_afterTnx</con:name></con:property><con:property><con:name>tnx_mobile</con:name><con:value>919782613536</con:value></con:property></con:properties><con:returnProperties><con:entry>tnx_number</con:entry><con:entry>tnxID</con:entry><con:entry>user_id</con:entry><con:entry>mobile</con:entry><con:entry>awarded_points_afterTnx</con:entry><con:entry>totalPoints_afterTnx</con:entry><con:entry>tnx_mobile</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="redeem half of the points awarded" id="6b66b6de-8722-4e24-a19a-f5673ecdc093"><con:settings/><con:config service="RedeemPoints" resourcePath="/{version}/points/redeem" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="redeem half of the points awarded" id="589bdef3-8de7-4a35-bc91-bdb079b2b19f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "redeem": {
      "points_redeemed": "${=Math.round(${#awarded_points_afterTnx}/2)}",
      "customer":
				{
					"mobile": "${#tnx_mobile}"
				},
      "group_redemption": "false",
      "notes": "redeem",
      "redemption_time": "${#TestSuite#current_time}"
    }
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/points/redeem</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c438e87e-0d8f-461e-ab56-18d73e8b58ba" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="28fbe66f-6d64-438c-b03f-c75b84aec1ec" name="Validate partial point redemption api response"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

//assert status
String successFlag = json.response.status.success
int code = json.response.status.code
String message = json.response.status.message

assert(successFlag == "true")
assert(code == 200)
assert(message == "Success")

//get the customer and transaction details from transaction add and point redeem api response
String pointsToBeRedeem =  context.expand('${=Math.round(${#awarded_points_afterTnx}/2)}') //dividing the awarded point and rounding off
String tnx_user_id = context.expand('${#user_id}')
String mob = context.expand('${#tnx_mobile}')
String user_id = json.response.responses.points.user_id.toString();
String mobile = json.response.responses.points.mobile.toString();
String num_points = json.response.responses.points.side_effects.effect[0].num_points.toString();
String currency_value = json.response.responses.points.side_effects.effect[0].currency_value.toString();
String redemption_id = json.response.responses.points.redemption_id.toString();
String redeemed_value = json.response.responses.points.redeemed_value.toString();


//Vaidating the actual and expected value from the response
assert(pointsToBeRedeem == redeemed_value)
assert(user_id == tnx_user_id)
assert(mobile == mob);
assert(num_points == pointsToBeRedeem)
assert(currency_value == pointsToBeRedeem)

//Exposing the redemption id for other api use
messageExchange.modelItem.testCase.setPropertyValue("redemption_id",redemption_id);


assert(json.response.responses.points.item_status.success == "true")
assert(json.response.responses.points.item_status.code == 800)
String msg = json.response.responses.points.item_status.message;
if(msg.toLowerCase() == "points redeemed"){
	assert true;
}
else{
	assert false : "Getting message as - " + msg;
}</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="program_id" value=""/>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters><con:parameterOrder><con:entry>format</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>redemption_id</con:name><con:value>iAocu4</con:value></con:property></con:properties></con:testCase><con:testCase id="310a2eb8-7984-477b-95a0-083d05c2b92e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Full_Points_Redemption_Against_Tnx_Number" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get current date and time" id="470d400d-2a45-4a04-84b1-3021542b96fc"><con:settings/><con:config><script>def getcurrent = Calendar.getInstance()
String current_time = getcurrent.format("yyyy-MM-dd HH:mm:ss");
testRunner.testCase.testSuite.setPropertyValue("current_time",current_time);</script></con:config></con:testStep><con:testStep type="calltestcase" name="add transaction with transaction number" id="ebe731fa-b082-4256-8278-277ff1f3b76f"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a6919450-66f2-417f-9891-60d4219922a2</con:targetTestCase><con:properties><con:property><con:name>tnx_number</con:name><con:value>1589782732648</con:value></con:property><con:property><con:name>tnxID</con:name><con:value>38249202</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378987836</con:value></con:property><con:property><con:name>mobile</con:name></con:property><con:property><con:name>awarded_points_afterTnx</con:name><con:value>500</con:value></con:property><con:property><con:name>totalPoints_afterTnx</con:name><con:value>500</con:value></con:property><con:property><con:name>pointBalance_afterTnx</con:name><con:value>null</con:value></con:property><con:property><con:name>tnx_mobile</con:name><con:value>919782732651</con:value></con:property></con:properties><con:returnProperties><con:entry>tnx_number</con:entry><con:entry>tnxID</con:entry><con:entry>user_id</con:entry><con:entry>awarded_points_afterTnx</con:entry><con:entry>totalPoints_afterTnx</con:entry><con:entry>pointBalance_afterTnx</con:entry><con:entry>tnx_mobile</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="redeem awarded points against transaction number" id="90cec6ee-cfcd-4bda-a9db-eb3c2b9ae755"><con:settings/><con:config service="RedeemPoints" resourcePath="/{version}/points/redeem" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="redeem awarded points against transaction number" id="589bdef3-8de7-4a35-bc91-bdb079b2b19f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "redeem": {
      "points_redeemed": "${#awarded_points_afterTnx}",
      "transaction_number": "${#tnx_number}",
      "customer":
				{
					"mobile": "${#tnx_mobile}"
				},
      "group_redemption": "false",
      "notes": "redeem",
      "redemption_time": "${#TestSuite#current_time}"
    }
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/points/redeem</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6e2bd406-02a0-41df-9f8e-f7166f69ffd2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="21523a64-f6d3-4913-9411-9ab4777cbec5" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

//get the customer and transaction details from transaction add and point redeem api response
String pointsToBeRedeem =  context.expand('${#awarded_points_afterTnx}')
String tnx_user_id = context.expand('${#user_id}')
String mob = context.expand('${#tnx_mobile}')
String tnx_number = context.expand('${#tnx_number}')
String user_id = json.response.responses.points.user_id.toString();
String mobile = json.response.responses.points.mobile.toString();
String num_points = json.response.responses.points.side_effects.effect[0].num_points.toString();
String currency_value = json.response.responses.points.side_effects.effect[0].currency_value.toString();
String redemption_id = json.response.responses.points.redemption_id.toString();
String redeemed_value = json.response.responses.points.redeemed_value.toString();
String tnx_number_aftpointsredeem = json.response.responses.points.side_effects.effect[0].redeemed_on_bill_number.toString();

//Vaidating the actual and expected value from the response
assert(pointsToBeRedeem == redeemed_value)
assert(user_id == tnx_user_id)
assert(mobile == mob);
assert(num_points == pointsToBeRedeem)
assert(currency_value == pointsToBeRedeem)
assert(tnx_number_aftpointsredeem == tnx_number)

//Exposing the redemption id for other api use
messageExchange.modelItem.testCase.setPropertyValue("redemption_id",redemption_id);


assert(json.response.responses.points.item_status.success == "true")
assert(json.response.responses.points.item_status.code == 800)
String msg = json.response.responses.points.item_status.message;
if(msg.toLowerCase() == "points redeemed"){
	assert true;
}
else{
	assert false : "Getting message as - " + msg;
}</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="program_id" value=""/>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters><con:parameterOrder><con:entry>format</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>redemption_id</con:name><con:value>HsifkE</con:value></con:property></con:properties></con:testCase><con:testCase id="e45bd6ea-01ee-43dd-a1ac-b13564d41dac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Partial_Points_Redemption_Against_Tnx_Number" searchProperties="true"><con:settings/><con:testStep type="groovy" name="call get current date and time script" id="1233e6fd-80b9-42f3-a107-5f72313e74e6"><con:settings/><con:config><script>def getcurrent = Calendar.getInstance()
String current_time = getcurrent.format("yyyy-MM-dd HH:mm:ss");
testRunner.testCase.testSuite.setPropertyValue("current_time",current_time);</script></con:config></con:testStep><con:testStep type="calltestcase" name="add a transaction with transaction number" id="a96964aa-036b-43a9-b2d7-f76798a6fcb0"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>a6919450-66f2-417f-9891-60d4219922a2</con:targetTestCase><con:properties><con:property><con:name>tnx_number</con:name><con:value>1589782792932</con:value></con:property><con:property><con:name>tnxID</con:name><con:value>38249203</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378987840</con:value></con:property><con:property><con:name>mobile</con:name></con:property><con:property><con:name>awarded_points_afterTnx</con:name><con:value>500</con:value></con:property><con:property><con:name>totalPoints_afterTnx</con:name><con:value>500</con:value></con:property><con:property><con:name>pointBalance_afterTnx</con:name><con:value>null</con:value></con:property><con:property><con:name>tnx_mobile</con:name><con:value>919782792935</con:value></con:property></con:properties><con:returnProperties><con:entry>tnx_number</con:entry><con:entry>tnxID</con:entry><con:entry>user_id</con:entry><con:entry>awarded_points_afterTnx</con:entry><con:entry>totalPoints_afterTnx</con:entry><con:entry>pointBalance_afterTnx</con:entry><con:entry>tnx_mobile</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="restrequest" name="redeem partial points against transaction number" id="20e83e7c-cc25-46d9-8383-04bc1c47a786"><con:settings/><con:config service="RedeemPoints" resourcePath="/{version}/points/redeem" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="redeem partial points against transaction number" id="589bdef3-8de7-4a35-bc91-bdb079b2b19f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding xsi:nil="true"/><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "redeem": {
      "points_redeemed": "${=Math.round(${#awarded_points_afterTnx}/2)}",
      "transaction_number": "${#tnx_number}",
      "customer":
				{
					"mobile": "${#tnx_mobile}"
				},
      "group_redemption": "false",
      "notes": "redeem",
      "redemption_time": "${#TestSuite#current_time}"
    }
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/points/redeem</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c438e87e-0d8f-461e-ab56-18d73e8b58ba" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="28fbe66f-6d64-438c-b03f-c75b84aec1ec" name="Validate partial point redemption api response"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

//get the customer and transaction details from transaction add and point redeem api response
String pointsToBeRedeem =  context.expand('${=Math.round(${#awarded_points_afterTnx}/2)}') //dividing the awarded point and rounding off
String tnx_user_id = context.expand('${#user_id}')
String mob = context.expand('${#tnx_mobile}')
String user_id = json.response.responses.points.user_id.toString();
String mobile = json.response.responses.points.mobile.toString();
String num_points = json.response.responses.points.side_effects.effect[0].num_points.toString();
String currency_value = json.response.responses.points.side_effects.effect[0].currency_value.toString();
String redemption_id = json.response.responses.points.redemption_id.toString();
String redeemed_value = json.response.responses.points.redeemed_value.toString();


//Vaidating the actual and expected value from the response
assert(pointsToBeRedeem == redeemed_value)
assert(user_id == tnx_user_id)
assert(mobile == mob);
assert(num_points == pointsToBeRedeem)
assert(currency_value == pointsToBeRedeem)

//Exposing the redemption id for other api use
messageExchange.modelItem.testCase.setPropertyValue("redemption_id",redemption_id);


assert(json.response.responses.points.item_status.success == "true")
assert(json.response.responses.points.item_status.code == 800)
String msg = json.response.responses.points.item_status.message;
if(msg.toLowerCase() == "points redeemed"){
	assert true;
}
else{
	assert false : "Getting message as - " + msg;
}</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="program_id" value=""/>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters><con:parameterOrder><con:entry>format</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>redemption_id</con:name><con:value>aJKPjo</con:value></con:property></con:properties></con:testCase><con:testCase id="8655a3f6-09ec-4cfd-8ab6-237d14e586f5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Pass_Redemption_Id_In_Add_Transaction" searchProperties="true"><con:settings/><con:testStep type="calltestcase" name="do full point redemption" id="18b9eafe-1794-4833-abbe-034527909b25"><con:settings/><con:config xsi:type="con:RunTestCaseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:targetTestCase>09dd370e-3ef6-4e5f-b954-65609ca078e7</con:targetTestCase><con:properties><con:property><con:name>redemption_id</con:name><con:value>2jqbp6</con:value></con:property><con:property><con:name>redemption_mobile</con:name><con:value>919783176780</con:value></con:property></con:properties><con:returnProperties><con:entry>redemption_id</con:entry><con:entry>redemption_mobile</con:entry></con:returnProperties><con:runMode>PARALLELL</con:runMode></con:config></con:testStep><con:testStep type="groovy" name="get current date and time" id="6bb7a7a9-38a7-486f-8b09-1dda614a2c93"><con:settings/><con:config><script>def getcurrent = Calendar.getInstance()
String current_time = getcurrent.format("yyyy-MM-dd HH:mm:ss");
testRunner.testCase.setPropertyValue("current_time",current_time);</script></con:config></con:testStep><con:testStep type="groovy" name="get unique transaction number" id="c778ef58-9ddc-4028-bb53-6f3234edd22b"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
log.info timestamp
testRunner.testCase.setPropertyValue("tnx_number",timestamp);</script></con:config></con:testStep><con:testStep type="restrequest" name="add transaction through redemption id" id="49bee437-a59c-4f6d-98ff-49b146a15871"><con:settings/><con:config service="addRegularTransaction" resourcePath="/v1.1/transaction/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="add transaction through redemption id" id="30d7b033-bada-4cf6-abdf-781b858869dc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "transaction": {
      "type": "regular",
      "number": "${#TestCase#tnx_number}",
      "amount": "1200",
      "billing_time": "${#current_time}",
      "gross_amount": "101",
      "redemptions": {
        "points_redemptions": {
        	"id":[
        	"${#redemption_id}"
          ]
        },
        "coupon_redemptions": {

        }
      },
      "customer": {
        "mobile": "${#redemption_mobile}",
        "firstname": "fname_${#redemption_mobile}",
        "lastname": "lname_${#redemption_mobile}",
        "type": "loyalty"
      },
      "custom_fields": {
        "field": {
          "name": "testcustom",
          "value": "test"
        }
      },
      "extended_fields": {
        "field": {
          "name": "CentralGST",
          "value": "98"
        }
      },
      "line_items": {
        "line_item": [
          {
            "attributes": {
              "attribute": {
                "name": "jeans",
                "value": "jeans"
              }
            },
            "serial": "1",
            "amount": "500",
            "description": "White",
            "item_code": "Pearls",
            "qty": "20",
            "rate": "50",
            "value": "1000",
            "discount": "0",
            "notes": "Return type of a line item with full"
          },
          {
            "attributes": {
              "attribute": {
                "name": "jeans",
                "value": "jeans"
              }
            },
            "serial": "2",
            "amount": "500",
            "description": "Extra",
            "item_code": "Extra",
            "qty": "10",
            "rate": "50",
            "value": "500",
            "discount": "0",
            "notes": "Return type of a line item with full"
          },
          {
            "attributes": {
              "attribute": {
                "name": "jeans",
                "value": "jeans"
              }
            },
            "serial": "3",
            "amount": "700",
            "description": "Extra",
            "item_code": "Extra",
            "qty": "1",
            "rate": "700",
            "value": "700",
            "discount": "0",
            "notes": "Return type of a line item with full"
          }
        ]
      }
    }
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/transaction/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2723f632-ee75-4973-b507-e099b334c281" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="38748da1-c4c1-4e5f-971e-c42a926b7a58" name="Verify add transaction point redemption response"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

//get redemption call details
String mob = context.expand('${#redemption_mobile}')
String tnxNumber = context.expand('${#TestCase#tnx_number}')


//get transaction details
String tnxID = json.response.transactions.transaction.id[0].toString();
String billNumber = json.response.transactions.transaction.number[0].toString();
String type = json.response.transactions.transaction.type[0].toString();
String user_id = json.response.transactions.transaction.customer[0].user_id.toString();
String redeemedValue = json.response.transactions.transaction.customer[0].points_summaries.points_summary[0].redeemed.toString();
String mobile = json.response.transactions.transaction.customer[0].mobile.toString();
String fname = json.response.transactions.transaction.customer[0].firstname.toString();
String lname = json.response.transactions.transaction.customer[0].lastname.toString();
String email = json.response.transactions.transaction.customer[0].email.toString();
String awarded_points = json.response.transactions.transaction.side_effects[0].effect.awarded_points[0].toString();
String totalPoints = json.response.transactions.transaction.side_effects[0].effect.total_points[0].toString();

//assert actual and expected value
assert(billNumber == tnxNumber);
assert(mobile == mob);
assert(fname == "fname_" + mob);
assert(lname == "lname_" + mob);
//assert(email == mob + "@gmail.com")


messageExchange.modelItem.testCase.setPropertyValue("awarded_points_afterTnx",awarded_points);
messageExchange.modelItem.testCase.setPropertyValue("totalPoints_afterTnx",totalPoints);
messageExchange.modelItem.testCase.setPropertyValue("tnx_mobile",mobile);
messageExchange.modelItem.testCase.setPropertyValue("tnxID",tnxID);
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);


//Item status.
assert(json.response.transactions.transaction.item_status[0].success == "true")
assert(json.response.transactions.transaction.item_status[0].code == 600)
String msg = json.response.transactions.transaction.item_status[0].message;
if(msg.toLowerCase() == "transaction added successfully"){
	assert true;
}
else{
	assert false : "Getting message as - " + msg;
}
</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>current_time</con:name><con:value>2020-05-18 11:56:22</con:value></con:property><con:property><con:name>tnx_number</con:name><con:value>1589783182714</con:value></con:property><con:property><con:name>tnxID</con:name><con:value>38249209</con:value></con:property><con:property><con:name>user_id</con:name><con:value>378988117</con:value></con:property><con:property><con:name>tnx_mobile</con:name><con:value>919783176780</con:value></con:property><con:property><con:name>awarded_points_afterTnx</con:name><con:value>320</con:value></con:property><con:property><con:name>totalPoints_afterTnx</con:name><con:value>320</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>current_time</con:name><con:value>2020-05-18 11:56:16</con:value></con:property></con:properties></con:testSuite><con:testSuite id="0c38c5f7-ee0f-4b71-9e88-733b992cd242" name="Behavioural_events_are_working_fine_endtoend"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="aa946f3b-1c01-4708-ae13-d7335cf6833a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Case1_event_triggered_through_default_till" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get unique customer mobile number" id="4164433d-8055-4dce-8a66-54a69be2bab3"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
String mobile = timestamp.substring(3);
testRunner.testCase.setPropertyValue("mobile","91" + mobile);</script></con:config></con:testStep><con:testStep type="restrequest" name="register a customer" id="b3c551f9-02ff-480f-b9a7-ff0cb9092cfb"><con:settings/><con:config service="customer_add" resourcePath="/{version}/customer/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="register a customer" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "${#TestCase#mobile}",
        "email": "${#TestCase#mobile}@gmail.com",

        "firstname": "fname_${#TestCase#mobile}",
        "lastname": "lname_${#TestCase#mobile}",
        "external_id": "x${#TestCase#mobile}",
        "gender": "M",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "122001"
					}
				]
			}

      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6561825e-a822-4b5a-8d71-764b779e304e" name="Status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358bd7c4-10af-4b97-9e52-6af837cb76b9" name="validate customer registration data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


//assert success holder in response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert customer data.

assert(json.response.customers.customer.user_id.size() == 1);

String user_id = json.response.customers.customer.user_id[0];
String f_name = json.response.customers.customer.firstname[0];
String l_name = json.response.customers.customer.lastname[0];
String mobile = json.response.customers.customer.mobile[0];
String email = json.response.customers.customer.email[0];
String lifetime_points = json.response.customers.customer.lifetime_points[0];
String loyalty_points = json.response.customers.customer.loyalty_points[0];
String current_slab = json.response.customers.customer.current_slab[0];

String lifetime_purchases = json.response.customers.customer.lifetime_purchases[0];
String type = json.response.customers.customer.type[0];
String source = json.response.customers.customer.source[0];
String mobile_reg = context.expand('${#TestCase#mobile}');







assert(lifetime_purchases == "0") // as this is new customer with no transactions.
assert(mobile == mobile_reg)
assert(json.response.customers.customer.subscriptions[0].subscription.size() == 4) // as we have configured 4 subscription while adding a customer.
assert(f_name == "fname_" + mobile_reg);
assert(l_name == "lname_" + mobile_reg);
assert(email == mobile_reg + "@gmail.com");
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.testSuite.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.setPropertyValue("lifetime_points",lifetime_points.toString());
messageExchange.modelItem.testCase.setPropertyValue("loyalty_points",loyalty_points.toString());





//item status.

String item_message = json.response.customers.customer.item_status[0].message
String item_status = json.response.customers.customer.item_status[0].success
String item_code = json.response.customers.customer.item_status[0].code
assert(item_status == "true")
assert(item_code == "1000")
assert(item_message== "Customer registration successful")</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="now trigger a custom event through default till" id="3ba26597-e13b-4c89-980e-942e5885a60c"><con:settings/><con:config service="triggerCustomEvent" resourcePath="" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="now trigger a custom event through default till" id="f773dd65-36e5-4368-91df-2c4c620e83d1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#custom_events_webhook}</con:endpoint><con:request>{"Mobile":"${#TestCase#mobile}",
"Name":"stringxxx",
"Till":"${#Project#auth_username}",
"event_name":"AlphaEndToEnd"}</con:request><con:originalUri>https://8mo7zxjtj0.execute-api.us-east-1.amazonaws.com/onenightly/webhooks/1b35496e-4126-4242-be3e-20f624766b67</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7f48372c-a1db-4aa8-b8b0-c1cde60f90c6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7b8ea09a-8dcb-4665-a95e-855e11551e8e" name="get the request ID"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

String request_id = json.requestId

messageExchange.modelItem.testCase.setPropertyValue("request_id",request_id);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get webhook consumer ID" id="77178375-c319-4c0c-9ace-7f0183402e67"><con:settings/><con:config service="getWebhooks" resourcePath="/{version}/webHooks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get webhook consumer ID" id="e34c812d-806e-498b-adbd-323081eda9a6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd5d1a2f-529b-492a-bf27-f3681c66848c" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b9a1562a-b14d-4245-a079-7407ffcc3c36" name="get webhook consumer id by webhook name"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def webhook_names = json.data.name;
def my_webhook = context.expand('${#Project#webhook_workspace_name}');
int index = 0;
String consumer_id = "";
for(String name in webhook_names){
	if(name == my_webhook){
		consumer_id = json.data.consumerGroupId[index];
	}
	index++;
}

messageExchange.modelItem.testCase.setPropertyValue("webhook_consumerID",consumer_id);</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="v3" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get loyalty points info after events gets trigered" id="c0a13fa9-8785-4ff4-aed5-772c00c59e25"><con:settings/><con:config service="getCustomerV2" resourcePath="/v2/customers/{user_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get loyalty points info after events gets trigered" id="35a353eb-1756-4e37-83f8-d8c4a290f0aa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v2/customers/376790377</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="396dd36d-730e-404e-bac9-0e2754e38fa0" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db44dbb0-61ac-473b-ac62-0e0c1d71ee5f" name="validate if points allocated is correct"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


int loyaltyPointsAfterEvent = json.groupLoyaltyProgramDetails.loyaltyPoints[0]

int loyaltyPointsBeforeEvent = Integer.parseInt(context.expand('${#TestCase#loyalty_points}'))

// Program is configured to allocate 100 points from default program whenever
// event is triggered from default program.

int pointsAllocatedForCustomEvent = 100

assert(loyaltyPointsAfterEvent == loyaltyPointsBeforeEvent + pointsAllocatedForCustomEvent)



</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="user_id" value="${#TestCase#user_id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="wait for sync" id="e27aac08-2eee-4df7-a0cb-caa6c529a4ac"><con:settings/><con:config><delay>120000</delay></con:config></con:testStep><con:testStep type="restrequest" name="validate the event log in mongo via an API" id="5fb75843-6e22-4599-a17f-e1e762fc7624"><con:settings/><con:config service="getEventLogs" resourcePath="/{version}/webHooks/eventLog/requestId/{request_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="validate the event log in mongo via an API" id="c3c5f177-ed07-4079-aa2d-e3b654c037ab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic Y20uMToyMDJjYjk2MmFjNTkwNzViOTY0YjA3MTUyZDIzNGI3MA==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a67073e-d145-4c5f-90bf-7b2955e84d93" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac07e8a1-01a4-49a8-9e5d-6e28d324525f" name="Validate &quot;Customer Added&quot; events pushed"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def consumers = json.data.consumerGroupId;

int index = 0;
String my_consumer = context.expand('${#TestCase#webhook_consumerID}');

ArrayList&lt;String> eventNames = new ArrayList();

ArrayList&lt;Integer> consumersStatus = new ArrayList();

for(consumer in consumers){
	if(consumer == my_consumer){
		String event_name = json.data.eventName[index];
		def consumerResponse = json.data.consumerResponse[index]
		assert(consumerResponse != null) : "Consumer response is NULL "
		int status = json.data.consumerResponse[index].webhookHttpStatus;
		eventNames.add(event_name);
		consumersStatus.add(status);
	}
	index++;
}

int eventCount = eventNames.size()
messageExchange.modelItem.testCase.setPropertyValue("events",eventNames.inspect())
messageExchange.modelItem.testCase.setPropertyValue("eventStatus",consumersStatus.inspect())

//all status should be 200
for(String status : consumersStatus){
	assert status == "200"
}
//customerAdded event should be pushed, as that is triggered as part of test case.
assert('pointsIssued' in eventNames)</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="version" value="v3"/>
  <con:entry key="request_id" value="${#TestCase#request_id}"/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>request_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="httprequest" name="validate response data of event pushed to webhook" id="45a13de7-9299-48e7-9827-127adf51d953"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="a8d53e36-26fb-4c1a-8c27-d0cb991becfb" name="validate response data of event pushed to webhook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#webhook_workspace}/api/events</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6f4c5385-a53b-43e7-bbcb-3e084abfe072" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b125b22a-5024-494c-b2f4-26382b2aaa51" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

int bodyCount = json.body.size();
def events = Eval.me(context.expand('${#TestCase#events}'))
def eventsInConsumer = json.body.eventName

messageExchange.modelItem.testCase.setPropertyValue('eventsReceived',eventsInConsumer.inspect())
assert(bodyCount == events.size())

assert('pointsIssued' in eventsInConsumer)

for(int i = 0;i&lt;bodyCount;i++){
	String event_name = json.body[i].eventName;
	if(event_name == "pointsIssued"){
		
	int pointsIssued = json.body[i].data.totalPointsIssued;
	assert(pointsIssued == 100)

	}

}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>request_id</con:name><con:value>${#TestCase#request_id}</con:value><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}
</con:setupScript><con:properties><con:property><con:name>mobile</con:name><con:value>910154920873</con:value></con:property><con:property><con:name>request_id</con:name><con:value>9dfc331f-c535-44d3-aeba-5546697285df</con:value></con:property><con:property><con:name>user_id</con:name><con:value>379064449</con:value></con:property><con:property><con:name>lifetime_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyalty_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyaltyType</con:name><con:value/></con:property><con:property><con:name>source</con:name><con:value/></con:property><con:property><con:name>till_code</con:name><con:value/></con:property><con:property><con:name>till_name</con:name><con:value/></con:property><con:property><con:name>lstLifeTimePoints_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstLoyaltyPoints_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstCurrentSlabs_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstProgramIds_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstProgramTitles_AfterTnx</con:name><con:value/></con:property><con:property><con:name>events</con:name><con:value/></con:property><con:property><con:name>eventStatus</con:name><con:value/></con:property><con:property><con:name>eventsReceived</con:name><con:value/></con:property><con:property><con:name>webhook_consumerID</con:name><con:value>befe1b9f-7948-4540-8794-3c0a6fc073bb</con:value></con:property></con:properties></con:testCase><con:testCase id="07b6512e-72ac-4581-ba4a-95ce6e79639a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Case2_event_is_triggered_with_first_nonDefault_till" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get unique customer mobile number" id="a2140f74-cbcc-4bbd-aa02-76722aff3b52"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
String mobile = timestamp.substring(3);
testRunner.testCase.setPropertyValue("mobile","91" + mobile);</script></con:config></con:testStep><con:testStep type="restrequest" name="register a customer" id="9c76789c-c686-441d-9dc2-9047cf87f0a3"><con:settings/><con:config service="customer_add" resourcePath="/{version}/customer/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="register a customer" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "${#TestCase#mobile}",
        "email": "${#TestCase#mobile}@gmail.com",

        "firstname": "fname_${#TestCase#mobile}",
        "lastname": "lname_${#TestCase#mobile}",
        "external_id": "x${#TestCase#mobile}",
        "gender": "M",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "122001"
					}
				]
			}

      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6561825e-a822-4b5a-8d71-764b779e304e" name="Status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358bd7c4-10af-4b97-9e52-6af837cb76b9" name="validate customer registration data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


//assert success holder in response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert customer data.

assert(json.response.customers.customer.user_id.size() == 1);

String user_id = json.response.customers.customer.user_id[0];
String f_name = json.response.customers.customer.firstname[0];
String l_name = json.response.customers.customer.lastname[0];
String mobile = json.response.customers.customer.mobile[0];
String email = json.response.customers.customer.email[0];
String lifetime_points = json.response.customers.customer.lifetime_points[0];
String loyalty_points = json.response.customers.customer.loyalty_points[0];
String current_slab = json.response.customers.customer.current_slab[0];

String lifetime_purchases = json.response.customers.customer.lifetime_purchases[0];
String type = json.response.customers.customer.type[0];
String source = json.response.customers.customer.source[0];
String mobile_reg = context.expand('${#TestCase#mobile}');







assert(lifetime_purchases == "0") // as this is new customer with no transactions.
assert(mobile == mobile_reg)
assert(json.response.customers.customer.subscriptions[0].subscription.size() == 4) // as we have configured 4 subscription while adding a customer.
assert(f_name == "fname_" + mobile_reg);
assert(l_name == "lname_" + mobile_reg);
assert(email == mobile_reg + "@gmail.com");
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.testSuite.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.setPropertyValue("lifetime_points",lifetime_points.toString());
messageExchange.modelItem.testCase.setPropertyValue("loyalty_points",loyalty_points.toString());





//item status.

String item_message = json.response.customers.customer.item_status[0].message
String item_status = json.response.customers.customer.item_status[0].success
String item_code = json.response.customers.customer.item_status[0].code
assert(item_status == "true")
assert(item_code == "1000")
assert(item_message== "Customer registration successful")</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="now trigger a custom event through first nonDefault till" id="e114a7a9-1b37-49cc-81e8-64ef3daf9633"><con:settings/><con:config service="triggerCustomEvent" resourcePath="" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="now trigger a custom event through first nonDefault till" id="f773dd65-36e5-4368-91df-2c4c620e83d1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#custom_events_webhook}</con:endpoint><con:request>{"Mobile":"${#TestCase#mobile}",
"Name":"stringxxx",
"Till":"${#Project#alphatill_username}",
"event_name":"AlphaEndToEnd"}</con:request><con:originalUri>https://8mo7zxjtj0.execute-api.us-east-1.amazonaws.com/onenightly/webhooks/1b35496e-4126-4242-be3e-20f624766b67</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7f48372c-a1db-4aa8-b8b0-c1cde60f90c6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7b8ea09a-8dcb-4665-a95e-855e11551e8e" name="get the request ID"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

String request_id = json.requestId

messageExchange.modelItem.testCase.setPropertyValue("request_id",request_id);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get webhook consumer ID" id="2a5a2d86-6c00-4b05-82a3-4ba076818da3"><con:settings/><con:config service="getWebhooks" resourcePath="/{version}/webHooks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get webhook consumer ID" id="e34c812d-806e-498b-adbd-323081eda9a6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd5d1a2f-529b-492a-bf27-f3681c66848c" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b9a1562a-b14d-4245-a079-7407ffcc3c36" name="get webhook consumer id by webhook name"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def webhook_names = json.data.name;
def my_webhook = context.expand('${#Project#webhook_workspace_name}');
int index = 0;
String consumer_id = "";
for(String name in webhook_names){
	if(name == my_webhook){
		consumer_id = json.data.consumerGroupId[index];
	}
	index++;
}

messageExchange.modelItem.testCase.setPropertyValue("webhook_consumerID",consumer_id);</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="v3" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get loyalty points info after events gets trigered" id="a6bed1b3-1927-417a-8db6-4cf0664f7d18"><con:settings/><con:config service="getCustomerV2" resourcePath="/v2/customers/{user_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get loyalty points info after events gets trigered" id="35a353eb-1756-4e37-83f8-d8c4a290f0aa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v2/customers/376790377</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="396dd36d-730e-404e-bac9-0e2754e38fa0" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db44dbb0-61ac-473b-ac62-0e0c1d71ee5f" name="validate if points allocated is correct"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


int loyaltyPointsAfterEvent = json.groupLoyaltyProgramDetails.loyaltyPoints[0]

int loyaltyPointsBeforeEvent = Integer.parseInt(context.expand('${#TestCase#loyalty_points}'))

// Program is configured to allocate 100 points from default program and 50 points 
// from non-defualt aplpha program whenever
// event is triggered from aplha program.

int pointsAllocatedForCustomEvent = 150

assert(loyaltyPointsAfterEvent == loyaltyPointsBeforeEvent + pointsAllocatedForCustomEvent)

// also assert the points allocated per program.

int[] loyaltyPoints = json.loyaltyProgramDetails.loyaltyPoints
int pointsInDefaultProgramExpected = (loyaltyPointsBeforeEvent+100)

assert(pointsInDefaultProgramExpected in loyaltyPoints)
assert(50 in loyaltyPoints)


</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="user_id" value="${#TestCase#user_id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="wait for sync" id="f8db3d7d-ed1a-4f4c-bdaa-5e37f90e03e8"><con:settings/><con:config><delay>120000</delay></con:config></con:testStep><con:testStep type="restrequest" name="validate the event log in mongo via an API" id="0efbaf04-fa21-45c2-9a8d-adad3bf55085"><con:settings/><con:config service="getEventLogs" resourcePath="/{version}/webHooks/eventLog/requestId/{request_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="validate the event log in mongo via an API" id="c3c5f177-ed07-4079-aa2d-e3b654c037ab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic Y20uMToyMDJjYjk2MmFjNTkwNzViOTY0YjA3MTUyZDIzNGI3MA==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a67073e-d145-4c5f-90bf-7b2955e84d93" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac07e8a1-01a4-49a8-9e5d-6e28d324525f" name="Validate &quot;Customer Added&quot; events pushed"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def consumers = json.data.consumerGroupId;

int index = 0;
String my_consumer = context.expand('${#TestCase#webhook_consumerID}');

ArrayList&lt;String> eventNames = new ArrayList();

ArrayList&lt;Integer> consumersStatus = new ArrayList();

for(consumer in consumers){
	if(consumer == my_consumer){
		String event_name = json.data.eventName[index];
		def consumerResponse = json.data.consumerResponse[index]
		assert(consumerResponse != null) : "Consumer response is NULL "
		int status = json.data.consumerResponse[index].webhookHttpStatus;
		eventNames.add(event_name);
		consumersStatus.add(status);
	}
	index++;
}

int eventCount = eventNames.size()
messageExchange.modelItem.testCase.setPropertyValue("events",eventNames.inspect())
messageExchange.modelItem.testCase.setPropertyValue("eventStatus",consumersStatus.inspect())

//all status should be 200
for(String status : consumersStatus){
	assert status == "200"
}
//customerAdded event should be pushed, as that is triggered as part of test case.
assert('pointsIssued' in eventNames)</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="version" value="v3"/>
  <con:entry key="request_id" value="${#TestCase#request_id}"/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>request_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="httprequest" name="validate response data of event pushed to webhook" id="894bdae0-12f5-466a-a6de-fb42a9393b47"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="a8d53e36-26fb-4c1a-8c27-d0cb991becfb" name="validate response data of event pushed to webhook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#webhook_workspace}/api/events</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6f4c5385-a53b-43e7-bbcb-3e084abfe072" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b125b22a-5024-494c-b2f4-26382b2aaa51" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

int bodyCount = json.body.size();
def events = Eval.me(context.expand('${#TestCase#events}'))
def eventsInConsumer = json.body.eventName

messageExchange.modelItem.testCase.setPropertyValue('eventsReceived',eventsInConsumer.inspect())
assert(bodyCount == events.size())

assert('pointsIssued' in eventsInConsumer)

for(int i = 0;i&lt;bodyCount;i++){
	String event_name = json.body[i].eventName;
	if(event_name == "pointsIssued"){
		
	int pointsIssued = json.body[i].data.totalPointsIssued;
	assert(pointsIssued == 100)

	}

}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>request_id</con:name><con:value>${#TestCase#request_id}</con:value><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}
</con:setupScript><con:properties><con:property><con:name>mobile</con:name><con:value>910152891207</con:value></con:property><con:property><con:name>request_id</con:name><con:value>00103cc6-bd7e-4120-8acb-c9c88975f36c</con:value></con:property><con:property><con:name>user_id</con:name><con:value>379064437</con:value></con:property><con:property><con:name>lifetime_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyalty_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyaltyType</con:name><con:value/></con:property><con:property><con:name>source</con:name><con:value/></con:property><con:property><con:name>till_code</con:name><con:value/></con:property><con:property><con:name>till_name</con:name><con:value/></con:property><con:property><con:name>lstLifeTimePoints_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstLoyaltyPoints_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstCurrentSlabs_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstProgramIds_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstProgramTitles_AfterTnx</con:name><con:value/></con:property><con:property><con:name>events</con:name><con:value>['pointsIssued', 'pointsIssued']</con:value></con:property><con:property><con:name>eventStatus</con:name><con:value>[200, 200]</con:value></con:property><con:property><con:name>eventsReceived</con:name><con:value>['pointsIssued']</con:value></con:property><con:property><con:name>webhook_consumerID</con:name><con:value>befe1b9f-7948-4540-8794-3c0a6fc073bb</con:value></con:property></con:properties></con:testCase><con:testCase id="ea4a15e6-521c-4ac1-8861-fadb155cab4a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Case3_event_is_triggered_with_second_nonDefault_till" searchProperties="true"><con:settings/><con:testStep type="groovy" name="get unique customer mobile number" id="79804cc9-ff13-4075-be3c-df22078684e8"><con:settings/><con:config><script>String timestamp = System.currentTimeMillis().toString()
String mobile = timestamp.substring(3);
testRunner.testCase.setPropertyValue("mobile","91" + mobile);</script></con:config></con:testStep><con:testStep type="restrequest" name="register a customer" id="4d2f9790-766e-4ea8-aa4b-8765f48c6b5e"><con:settings/><con:config service="customer_add" resourcePath="/{version}/customer/add" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="register a customer" id="6b3f46be-1a90-4d61-9862-329d83eba9bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-CAP-CLIENT-COUNTRYCODE" value="1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request>{
  "root": {
    "customer": [
      {
        "mobile": "${#TestCase#mobile}",
        "email": "${#TestCase#mobile}@gmail.com",

        "firstname": "fname_${#TestCase#mobile}",
        "lastname": "lname_${#TestCase#mobile}",
        "external_id": "x${#TestCase#mobile}",
        "gender": "M",
        "subscriptions": {
          "subscription": [
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "email"
            },
            {
              "priority": "TRANS",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            },
            {
              "priority": "BULK",
              "scope": "all",
              "is_subscribed": "0",
              "channel": "sms"
            }
          ]
        },
        	"extended_fields": {
				"field": [{
						"name": "nationality",
						"value": "India"
					},
					{
						"name": "zip",
						"value": "122001"
					}
				]
			}

      }
    ]
  }
}</con:request><con:originalUri>https://nightly.capillary.in/v1.1/customer/add</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6561825e-a822-4b5a-8d71-764b779e304e" name="Status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="358bd7c4-10af-4b97-9e52-6af837cb76b9" name="validate customer registration data"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


//assert success holder in response
assert(json.response.status.success == "true")
assert(json.response.status.code == 200)
assert(json.response.status.message == "Success")


//assert customer data.

assert(json.response.customers.customer.user_id.size() == 1);

String user_id = json.response.customers.customer.user_id[0];
String f_name = json.response.customers.customer.firstname[0];
String l_name = json.response.customers.customer.lastname[0];
String mobile = json.response.customers.customer.mobile[0];
String email = json.response.customers.customer.email[0];
String lifetime_points = json.response.customers.customer.lifetime_points[0];
String loyalty_points = json.response.customers.customer.loyalty_points[0];
String current_slab = json.response.customers.customer.current_slab[0];

String lifetime_purchases = json.response.customers.customer.lifetime_purchases[0];
String type = json.response.customers.customer.type[0];
String source = json.response.customers.customer.source[0];
String mobile_reg = context.expand('${#TestCase#mobile}');







assert(lifetime_purchases == "0") // as this is new customer with no transactions.
assert(mobile == mobile_reg)
assert(json.response.customers.customer.subscriptions[0].subscription.size() == 4) // as we have configured 4 subscription while adding a customer.
assert(f_name == "fname_" + mobile_reg);
assert(l_name == "lname_" + mobile_reg);
assert(email == mobile_reg + "@gmail.com");
messageExchange.modelItem.testCase.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.testSuite.setPropertyValue("user_id",user_id);
messageExchange.modelItem.testCase.setPropertyValue("lifetime_points",lifetime_points.toString());
messageExchange.modelItem.testCase.setPropertyValue("loyalty_points",loyalty_points.toString());





//item status.

String item_message = json.response.customers.customer.item_status[0].message
String item_status = json.response.customers.customer.item_status[0].success
String item_code = json.response.customers.customer.item_status[0].code
assert(item_status == "true")
assert(item_code == "1000")
assert(item_message== "Customer registration successful")</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="format" value="json"/>
  <con:entry key="version" value="v1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="now trigger a custom event through second nonDefault till" id="8d884097-d2e7-44f3-9971-aab093c9f50e"><con:settings/><con:config service="triggerCustomEvent" resourcePath="" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="now trigger a custom event through second nonDefault till" id="f773dd65-36e5-4368-91df-2c4c620e83d1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#custom_events_webhook}</con:endpoint><con:request>{"Mobile":"${#TestCase#mobile}",
"Name":"stringxxx",
"Till":"${#Project#gammatill_username}",
"event_name":"AlphaEndToEnd"}</con:request><con:originalUri>https://8mo7zxjtj0.execute-api.us-east-1.amazonaws.com/onenightly/webhooks/1b35496e-4126-4242-be3e-20f624766b67</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7f48372c-a1db-4aa8-b8b0-c1cde60f90c6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7b8ea09a-8dcb-4665-a95e-855e11551e8e" name="get the request ID"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

String request_id = json.requestId

messageExchange.modelItem.testCase.setPropertyValue("request_id",request_id);</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get webhook consumer ID" id="fe9e490a-01c4-4512-952f-9524b6d1780d"><con:settings/><con:config service="getWebhooks" resourcePath="/{version}/webHooks" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get webhook consumer ID" id="e34c812d-806e-498b-adbd-323081eda9a6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bd5d1a2f-529b-492a-bf27-f3681c66848c" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b9a1562a-b14d-4245-a079-7407ffcc3c36" name="get webhook consumer id by webhook name"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def webhook_names = json.data.name;
def my_webhook = context.expand('${#Project#webhook_workspace_name}');
int index = 0;
String consumer_id = "";
for(String name in webhook_names){
	if(name == my_webhook){
		consumer_id = json.data.consumerGroupId[index];
	}
	index++;
}

messageExchange.modelItem.testCase.setPropertyValue("webhook_consumerID",consumer_id);</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="v3" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get loyalty points info after events gets trigered" id="595a0dce-602c-4926-a45b-da4c414327f1"><con:settings/><con:config service="getCustomerV2" resourcePath="/v2/customers/{user_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get loyalty points info after events gets trigered" id="35a353eb-1756-4e37-83f8-d8c4a290f0aa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v2/customers/376790377</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="396dd36d-730e-404e-bac9-0e2754e38fa0" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db44dbb0-61ac-473b-ac62-0e0c1d71ee5f" name="validate if points allocated is correct"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);


int loyaltyPointsAfterEvent = json.groupLoyaltyProgramDetails.loyaltyPoints[0]

int loyaltyPointsBeforeEvent = Integer.parseInt(context.expand('${#TestCase#loyalty_points}'))

// Program is configured to allocate 100 points from default program and 50 points 
// from non-defualt aplpha program whenever
// event is triggered from aplha program.

int pointsAllocatedForCustomEvent = 140

assert(loyaltyPointsAfterEvent == loyaltyPointsBeforeEvent + pointsAllocatedForCustomEvent)

// also assert the points allocated per program.

int[] loyaltyPoints = json.loyaltyProgramDetails.loyaltyPoints
int pointsInDefaultProgramExpected = (loyaltyPointsBeforeEvent+100)

assert(pointsInDefaultProgramExpected in loyaltyPoints)
assert(40 in loyaltyPoints)


</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="user_id" value="${#TestCase#user_id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="wait for sync" id="49719df6-6c42-4e53-8853-6ce89924a670"><con:settings/><con:config><delay>120000</delay></con:config></con:testStep><con:testStep type="restrequest" name="validate the event log in mongo via an API" id="a47eae45-ddfd-4b4d-93e9-ac94459a210f"><con:settings/><con:config service="getEventLogs" resourcePath="/{version}/webHooks/eventLog/requestId/{request_id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="validate the event log in mongo via an API" id="c3c5f177-ed07-4079-aa2d-e3b654c037ab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Basic Y20uMToyMDJjYjk2MmFjNTkwNzViOTY0YjA3MTUyZDIzNGI3MA==" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://${#Project#application_endpoint}</con:endpoint><con:request/><con:originalUri>https://nightly.capillary.in/v3/webHooks/eventLog/requestId/d0b07a50-3efb-4c16-b395-45b49fb37ffa</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a67073e-d145-4c5f-90bf-7b2955e84d93" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac07e8a1-01a4-49a8-9e5d-6e28d324525f" name="Validate &quot;Customer Added&quot; events pushed"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

def consumers = json.data.consumerGroupId;

int index = 0;
String my_consumer = context.expand('${#TestCase#webhook_consumerID}');

ArrayList&lt;String> eventNames = new ArrayList();

ArrayList&lt;Integer> consumersStatus = new ArrayList();

for(consumer in consumers){
	if(consumer == my_consumer){
		String event_name = json.data.eventName[index];
		def consumerResponse = json.data.consumerResponse[index]
		assert(consumerResponse != null) : "Consumer response is NULL "
		int status = json.data.consumerResponse[index].webhookHttpStatus;
		eventNames.add(event_name);
		consumersStatus.add(status);
	}
	index++;
}

int eventCount = eventNames.size()
messageExchange.modelItem.testCase.setPropertyValue("events",eventNames.inspect())
messageExchange.modelItem.testCase.setPropertyValue("eventStatus",consumersStatus.inspect())

//all status should be 200
for(String status : consumersStatus){
	assert status == "200"
}
//customerAdded event should be pushed, as that is triggered as part of test case.
assert('pointsIssued' in eventNames)</scriptText></con:configuration></con:assertion><con:credentials><con:username>${#Project#auth_username}</con:username><con:password>${#Project#auth_password}</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="version" value="v3"/>
  <con:entry key="request_id" value="${#TestCase#request_id}"/>
</con:parameters><con:parameterOrder><con:entry>version</con:entry><con:entry>request_id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="httprequest" name="validate response data of event pushed to webhook" id="144638f7-db3b-41ba-9afa-bd9413a57345"><con:settings/><con:config method="GET" xsi:type="con:HttpRequest" id="a8d53e36-26fb-4c1a-8c27-d0cb991becfb" name="validate response data of event pushed to webhook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#webhook_workspace}/api/events</con:endpoint><con:request/><con:assertion type="Valid HTTP Status Codes" id="6f4c5385-a53b-43e7-bbcb-3e084abfe072" name="status - 200"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b125b22a-5024-494c-b2f4-26382b2aaa51" name="Script Assertion"><con:configuration><scriptText>import groovy.json.JsonSlurper;

String response = messageExchange.getResponseContent();
def json = new JsonSlurper().parseText(response);

int bodyCount = json.body.size();
def events = Eval.me(context.expand('${#TestCase#events}'))
def eventsInConsumer = json.body.eventName

messageExchange.modelItem.testCase.setPropertyValue('eventsReceived',eventsInConsumer.inspect())
assert(bodyCount == events.size())

assert('pointsIssued' in eventsInConsumer)

for(int i = 0;i&lt;bodyCount;i++){
	String event_name = json.body[i].eventName;
	if(event_name == "pointsIssued"){
		
	int pointsIssued = json.body[i].data.totalPointsIssued;
	assert(pointsIssued == 100)

	}

}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><con:parameter><con:name>request_id</con:name><con:value>${#TestCase#request_id}</con:value><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters></con:config></con:testStep><con:setupScript>// Setting all the test cases property to blank value (by default)
import com.eviware.soapui.model.testsuite.TestProperty
List&lt;TestProperty> properties = testCase.getPropertyList()

for(TestProperty prop : properties){
	prop.setValue("")
}
</con:setupScript><con:properties><con:property><con:name>mobile</con:name><con:value>910153790181</con:value></con:property><con:property><con:name>request_id</con:name><con:value>29752849-f016-4905-a06c-79ad351a18d9</con:value></con:property><con:property><con:name>user_id</con:name><con:value>379064440</con:value></con:property><con:property><con:name>lifetime_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyalty_points</con:name><con:value>180</con:value></con:property><con:property><con:name>loyaltyType</con:name><con:value/></con:property><con:property><con:name>source</con:name><con:value/></con:property><con:property><con:name>till_code</con:name><con:value/></con:property><con:property><con:name>till_name</con:name><con:value/></con:property><con:property><con:name>lstLifeTimePoints_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstLoyaltyPoints_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstCurrentSlabs_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstProgramIds_AfterTnx</con:name><con:value/></con:property><con:property><con:name>lstProgramTitles_AfterTnx</con:name><con:value/></con:property><con:property><con:name>events</con:name><con:value/></con:property><con:property><con:name>eventStatus</con:name><con:value/></con:property><con:property><con:name>eventsReceived</con:name><con:value/></con:property><con:property><con:name>webhook_consumerID</con:name><con:value>befe1b9f-7948-4540-8794-3c0a6fc073bb</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>user_id</con:name><con:value>379064449</con:value></con:property><con:property><con:name>webhook_consumerID</con:name><con:value/></con:property></con:properties></con:testSuite><con:properties><con:property><con:name>environment</con:name><con:value>nightly</con:value></con:property><con:property><con:name>auth_username</con:name><con:value>endtoend_test</con:value></con:property><con:property><con:name>auth_password</con:name><con:value>202cb962ac59075b964b07152d234b70</con:value></con:property><con:property><con:name>application_endpoint</con:name><con:value>nightly.capillary.in</con:value></con:property><con:property><con:name>webhook_workspace</con:name><con:value>enqovte5kgmv6a1.m.pipedream.net</con:value></con:property><con:property><con:name>webhook_workspace_name</con:name><con:value>endtoend_hook_ng</con:value></con:property><con:property><con:name>custom_events_webhook</con:name><con:value>8mo7zxjtj0.execute-api.us-east-1.amazonaws.com/onenightly/webhooks/1b35496e-4126-4242-be3e-20f624766b67</con:value></con:property><con:property><con:name>alphatill_username</con:name><con:value>alpha_endtoend_test</con:value></con:property><con:property><con:name>alphatill_password</con:name><con:value>202cb962ac59075b964b07152d234b70</con:value></con:property><con:property><con:name>gammatill_username</con:name><con:value>gamma_endtoend_test</con:value></con:property><con:property><con:name>gammatill_password</con:name><con:value>202cb962ac59075b964b07152d234b70</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:beforeRunScript>import groovy.json.JsonSlurper
import java.io.FileInputStream;


// connect to json data file based on environment specified.
String environment = context.expand('${#Project#environment}');
String project_dir = context.expand('${projectDir}');
String filepath = project_dir + File.separator + "test_data" + File.separator + project.name + File.separator + environment + ".json";
log.info environment
try{
//File data_file = new File(filepath);
def reader = new BufferedReader(new InputStreamReader(new FileInputStream(filepath),"UTF-8"))
def json = new JsonSlurper().parse(reader);
String endpoint = json.endpoint;
String auth_username = json.authorization.username;
String auth_password = json.authorization.password;
project.setPropertyValue("auth_username",auth_username);
project.setPropertyValue("auth_password",auth_password);
project.setPropertyValue("alphatill_username",json.authorization.alphatill_username);
project.setPropertyValue("alphatill_password",json.authorization.alphatill_password);
project.setPropertyValue("gammatill_username",json.authorization.gammatill_username);
project.setPropertyValue("gammatill_password",json.authorization.gammatill_password);
project.setPropertyValue("application_endpoint",endpoint);
project.setPropertyValue("webhook_workspace",json.webhook_workspace);
project.setPropertyValue("webhook_workspace_name",json.webhook_workspace_name);
project.setPropertyValue("custom_events_webhook",json.custom_events_webhook);
}
catch(Exception e){
	log.info("Could not find the data file " + filepath + " Please check the data file. error == " + e.getMessage());
	assert(false)
}
</con:beforeRunScript><con:sensitiveInformation/></con:soapui-project>